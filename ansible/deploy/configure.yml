---
- hosts: deploy

  vars:
    APP_DB_USER: fereol
    APP_DB_NAME: fereol
    ansible_python_interpreter: "/usr/bin/python3"
    pwd_alias: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters,digits') }}"

  tasks:

    # https://github.com/ansible/ansible/issues/25414#issuecomment-440549135
    - name: Wait for any possibly running unattended upgrade to finish
      raw: systemd-run --property="After=apt-daily.service apt-daily-upgrade.service" --wait /bin/true
      become: yes

    - name: Upgrade all packages to the latest version
      apt:
        upgrade: full
        update_cache: yes
        force_apt_get: true
      become: yes

    # installation acl: https://github.com/georchestra/ansible/issues/55#issuecomment-588313638
    - name: Install tools
      apt:
        pkg:
        - acl
        - nodejs
        - npm
        - git
        - redis-server
        - nginx
        - postfix
        - p7zip-full
      become: yes

    - name: Instal yarn
      npm:
        name: yarn
        global: yes
      become: yes

    - name: Install python tools
      apt:
        pkg:
        - python3
        - python3-pip
        - python3-venv
        - python3-psycopg2
      become: yes

    - name: Ensure group for deploy_user exists
      become: yes
      group:
        name: "{{ deploy_user }}"
        state: present

    - name: Add the deploy_user to remote machine
      become: yes
      user:
        name: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        create_home: yes

    # Generate passwords and edit .env file
    - name: Copy .env file to deploy_user's home
      become: yes
      become_user: "{{ deploy_user }}"
      copy:
        src: .env
        dest: "/home/{{ deploy_user }}/"
        force: yes

    - name: Generate password
      set_fact:
        APP_DB_PASS: "{{ pwd_alias }}"
      no_log: True

    - name: Edit .env file
      become: yes
      become_user: "{{ deploy_user }}"
      replace:
        path: "/home/{{ deploy_user }}/.env"
        regexp: 'DATABASE_PASSWORD='
        replace: "DATABASE_PASSWORD={{ APP_DB_PASS }}"

    # Edit allowed hosts in .env file
    - name: Add host to .env file
      become: yes
      become_user: "{{ deploy_user }}"
      replace:
        path: "/home/{{ deploy_user }}/.env"
        regexp: 'ALLOWED_HOSTS='
        replace: 'ALLOWED_HOSTS={{ deploy_server_name }}'

    # Configure postgres
    - name: Ensure a locale exists
      locale_gen:
        name: pl_PL.UTF-8
        state: present
      become: yes

    - name: Install postgresql and postgresql-contrib
      apt:
        pkg:
        - postgresql
        - postgresql-contrib
        state: present
      become: yes

    - name: Create the database user
      become: yes
      become_user: postgres
      postgresql_user:
        name: "{{ APP_DB_USER }}"
        password: "{{ APP_DB_PASS }}"
        role_attr_flags: CREATEDB
        encrypted: yes

    - name: Create the database
      become: yes
      become_user: postgres
      postgresql_db:
        name: "{{ APP_DB_NAME }}"
        owner: "{{ APP_DB_USER }}"
        encoding: UTF-8
        lc_collate: pl_PL.UTF-8
        lc_ctype: pl_PL.UTF-8
        template: template0

    # Configure and sandbox Nginx
    - stat:
        path: /lib/systemd/system/nginx.service
      register: lib_nginx_status

    - name: Configure nginx service restart conditions
      lineinfile:
        path: /lib/systemd/system/nginx.service
        insertafter: "^KillMode=mixed$"
        line: "{{ item.line }}"
      with_items:
        - {line: "RestartSec=10"}
        - {line: "Restart=on-failure"}
      become: yes
      when: lib_nginx_status.stat.exists

    - name: Stop nginx service
      systemd:
        name: nginx
        state: stopped
      become: yes

    - name: Adding user www-data to group ssl-cert
      user:
        name: "www-data"
        groups: "ssl-cert"
        append: yes
      become: yes

    - name: Copy nginx service file to /etc
      copy:
        src: "/lib/systemd/system/nginx.service"
        dest: "/etc/systemd/system/nginx.service"
        force: yes
        remote_src: yes
      become: yes
      when: lib_nginx_status.stat.exists

    - name: Delete nginx service file from /lib
      file:
        path: /lib/systemd/system/nginx.service
        state: absent
      become: yes

    - name: Configure nginx service
      lineinfile:
        path: /etc/systemd/system/nginx.service
        insertafter: "^KillMode=mixed$"
        line: "{{ item.line }}"
      with_items:
        - {line: "RestartSec=10"}
        - {line: "Restart=on-failure"}
        - {line: "RuntimeDirectory=nginx"}
        - {line: "AmbientCapabilities=CAP_NET_BIND_SERVICE"}
        - {line: "User=www-data"}
        - {line: "Group=www-data"}
        - {line: "NoNewPrivileges=true"}
        - {line: "LockPersonality=true"}
        - {line: "SystemCallErrorNumber=EPERM"}
      become: yes

    - name: Move PID file
      lineinfile:
        path: /etc/systemd/system/nginx.service
        regexp: "PIDFile="
        line: "PIDFile=/run/nginx/nginx.pid"
      become: yes

    - name: Deploy nginx configs
      become: yes
      copy:
        src: "{{ item.file }}"
        dest: "/etc/nginx/{{ item.path }}"
        force: yes
      with_items:
        - {file: "nginx.conf", path: ""}
        - {file: "zapisy.conf", path: "sites-available/"}
        - {file: "ssl-params.conf", path: "snippets/"}
        - {file: "ssl-signed.conf", path: "snippets/"}

    - name: Replace a pattern with username in nginx file - zapisy.conf
      become: yes
      replace:
        path: /etc/nginx/sites-available/zapisy.conf
        regexp: '\$user\$'
        replace: "{{ deploy_user }}"

    - name: Replace a pattern with username in nginx file - zapisy.conf
      become: yes
      replace:
        path: /etc/nginx/sites-available/zapisy.conf
        regexp: '\$domain\$'
        replace: "{{ deploy_server_name }}"

    - name: Create ssl directory
      file:
        path: /etc/nginx/ssl
        state: directory
      become: yes

    - name: Deploy ssl selfsigned files genereted by OpenSSL
      copy:
        src: "{{ item.file }}"
        dest: "{{ item.path }}"
        force: yes
      with_items:
        - {file: "ssl/nginx-selfsigned.crt", path: "/etc/ssl/certs/"}
        - {file: "ssl/nginx-selfsigned.key", path: "/etc/ssl/private/"}
        - {file: "ssl/dhparam.pem", path: "/etc/nginx/"}
      become: yes

    # Configure Postfix
    - name: Configure nginx service
      lineinfile:
        path: /etc/postfix/main.cf
        regexp: "inet_interfaces"
        line: "inet_interfaces = loopback-only"
      become: yes

    # Configure other services
    - name: Deploy gunicorn socket
      copy:
        src: gunicorn.socket
        dest: /etc/systemd/system/
        force: yes
      become: yes

    - name: Deploy gunicorn service
      copy:
        src: gunicorn.service
        dest: /etc/systemd/system/
        force: yes
      become: yes

    - name: Deploy yarn build service
      copy:
        src: yarn_build.service
        dest: /etc/systemd/system/
        force: yes
      become: yes

    - name: Deploy backup service
      copy:
        src: backup.service
        dest: /etc/systemd/system/
        force: yes
      become: yes

    - name: Deploy backup timer
      copy:
        src: backup.timer
        dest: /etc/systemd/system/
        force: yes
      become: yes

    - name: Deploy rqworker1
      copy:
        src: rqworker1.service
        dest: /etc/systemd/system/
        force: yes
      become: yes

    - name: Deploy rqworker2
      copy:
        src: rqworker2.service
        dest: /etc/systemd/system/
        force: yes
      become: yes

    - name: Get number of CPUs
      shell: nproc
      register: nproc_out

    - name: Replace a pattern with username in gunicorn socket
      become: yes
      replace:
        path: /etc/systemd/system/gunicorn.socket
        regexp: '\$user\$'
        replace: "{{ deploy_user }}"

    - name: Replace a pattern with username in gunicorn service
      become: yes
      replace:
        path: /etc/systemd/system/gunicorn.service
        regexp: '\$user\$'
        replace: "{{ deploy_user }}"

    - name: Replace a pattern with number of workers in gunicorn service
      become: yes
      replace:
        path: /etc/systemd/system/gunicorn.service
        regexp: '\$num_proc\$'
        replace: "{{ nproc_out.stdout|int * 2 + 1 }}"

    - name: Replace a pattern with username in yarn build service
      become: yes
      replace:
        path: /etc/systemd/system/yarn_build.service
        regexp: '\$user\$'
        replace: "{{ deploy_user }}"

    - name: Replace a pattern with username in rqworker1 service
      become: yes
      replace:
        path: /etc/systemd/system/rqworker1.service
        regexp: '\$user\$'
        replace: "{{ deploy_user }}"

    - name: Replace a pattern with username in rqworker2 service
      become: yes
      replace:
        path: /etc/systemd/system/rqworker2.service
        regexp: '\$user\$'
        replace: "{{ deploy_user }}"

    - name: Replace a pattern with username in backup service
      become: yes
      replace:
        path: /etc/systemd/system/backup.service
        regexp: '\$user\$'
        replace: "{{ deploy_user }}"

    - name: Systemd daemon reload
      systemd:
        daemon_reload: yes
      become: yes
