
[4mIPTABLES[24m(8)                                              iptables 1.8.10                                             [4mIPTABLES[24m(8)

[1mNAME[0m
       iptables/ip6tables ‚Äî administration tool for IPv4/IPv6 packet filtering and NAT

[1mSYNOPSIS[0m
       [1miptables [22m[[1m-t [4m[22mtable[24m] {[1m-A[22m|[1m-C[22m|[1m-D[22m|[1m-V[22m} [4mchain[24m [4mrule-specification[0m

       [1mip6tables [22m[[1m-t [4m[22mtable[24m] {[1m-A[22m|[1m-C[22m|[1m-D[22m|[1m-V[22m} [4mchain[24m [4mrule-specification[0m

       [1miptables [22m[[1m-t [4m[22mtable[24m] [1m-I [4m[22mchain[24m [[4mrulenum[24m] [4mrule-specification[0m

       [1miptables [22m[[1m-t [4m[22mtable[24m] [1m-R [4m[22mchain[24m [4mrulenum[24m [4mrule-specification[0m

       [1miptables [22m[[1m-t [4m[22mtable[24m] [1m-D [4m[22mchain[24m [4mrulenum[0m

       [1miptables [22m[[1m-t [4m[22mtable[24m] [1m-S [22m[[4mchain[24m [[4mrulenum[24m]]

       [1miptables [22m[[1m-t [4m[22mtable[24m] {[1m-F[22m|[1m-L[22m|[1m-Z[22m} [[4mchain[24m [[4mrulenum[24m]] [[4moptions...[24m]

       [1miptables [22m[[1m-t [4m[22mtable[24m] [1m-N [4m[22mchain[0m

       [1miptables [22m[[1m-t [4m[22mtable[24m] [1m-X [22m[[4mchain[24m]

       [1miptables [22m[[1m-t [4m[22mtable[24m] [1m-P [4m[22mchain[24m [4mtarget[0m

       [1miptables [22m[[1m-t [4m[22mtable[24m] [1m-E [4m[22mold-chain-name[24m [4mnew-chain-name[0m

       rule-specification = [[4mmatches...[24m] [[4mtarget[24m]

       match = [1m-m [4m[22mmatchname[24m [[4mper-match-options[24m]

       target = [1m-j [4m[22mtargetname[24m [[4mper-target-options[24m]

[1mDESCRIPTION[0m
       [1mIptables  [22mand  [1mip6tables [22mare used to set up, maintain, and inspect the tables of IPv4 and IPv6 packet filter rules in the
       Linux kernel.  Several different tables may be defined.  Each table contains a number of built-in  chains  and  may  also
       contain user-defined chains.

       Each  chain  is  a  list  of  rules  which can match a set of packets.  Each rule specifies what to do with a packet that
       matches.  This is called a ‚Äòtarget', which may be a jump to a user-defined chain in the same table.

[1mTARGETS[0m
       A firewall rule specifies criteria for a packet and a target.  If the packet does not match, the next rule in  the  chain
       is  examined;  if  it  does match, then the next rule is specified by the value of the target, which can be the name of a
       user-defined chain, one of the targets described in [1miptables-extensions[22m(8), or one of the special values [1mACCEPT[22m, [1mDROP  [22mor
       [1mRETURN[22m.

       [1mACCEPT  [22mmeans  to let the packet through.  [1mDROP [22mmeans to drop the packet on the floor.  [1mRETURN [22mmeans stop traversing this
       chain and resume at the next rule in the previous (calling) chain.  If the end of a built-in chain is reached or  a  rule
       in  a  built-in  chain with target [1mRETURN [22mis matched, the target specified by the chain policy determines the fate of the
       packet.

[1mTABLES[0m
       There are currently five independent tables (which tables are present at any time depends on the kernel configuration op‚Äê
       tions and which modules are present).

       [1m-t[22m, [1m--table [4m[22mtable[0m
              This option specifies the packet matching table which the command should operate on.  If the kernel is  configured
              with  automatic module loading, an attempt will be made to load the appropriate module for that table if it is not
              already there.

              The tables are as follows:

              [1mfilter[22m:
                  This is the default table (if no -t option is passed). It contains the built-in chains [1mINPUT [22m(for packets des‚Äê
                  tined to local sockets), [1mFORWARD [22m(for packets being routed through the box), and [1mOUTPUT [22m(for locally-generated
                  packets).

              [1mnat[22m:
                  This table is consulted when a packet that creates a new connection  is  encountered.   It  consists  of  four
                  built-ins: [1mPREROUTING [22m(for altering packets as soon as they come in), [1mINPUT [22m(for altering packets destined for
                  local  sockets), [1mOUTPUT [22m(for altering locally-generated packets before routing), and [1mPOSTROUTING [22m(for altering
                  packets as they are about to go out).  IPv6 NAT support is available since kernel 3.7.

              [1mmangle[22m:
                  This table is used for specialized packet alteration.  Until kernel 2.4.17 it had two  built-in  chains:  [1mPRE‚Äê[0m
                  [1mROUTING  [22m(for altering incoming packets before routing) and [1mOUTPUT [22m(for altering locally-generated packets be‚Äê
                  fore routing).  Since kernel 2.4.18, three other built-in chains are also supported: [1mINPUT [22m(for packets coming
                  into the box itself), [1mFORWARD [22m(for altering packets being routed through the box), and [1mPOSTROUTING [22m(for alter‚Äê
                  ing packets as they are about to go out).

              [1mraw[22m:
                  This table is used mainly for configuring exemptions from connection tracking in combination with the  NOTRACK
                  target.   It  registers at the netfilter hooks with higher priority and is thus called before ip_conntrack, or
                  any other IP tables.  It provides the following built-in chains: [1mPREROUTING [22m(for packets arriving via any net‚Äê
                  work interface) and [1mOUTPUT [22m(for packets generated by local processes).

              [1msecurity[22m:
                  This table is used for Mandatory Access Control (MAC) networking rules, such as those enabled by  the  [1mSECMARK[0m
                  and  [1mCONNSECMARK  [22mtargets.  Mandatory Access Control is implemented by Linux Security Modules such as SELinux.
                  The security table is called after the filter table, allowing any Discretionary Access Control (DAC) rules  in
                  the  filter  table  to take effect before MAC rules.  This table provides the following built-in chains: [1mINPUT[0m
                  (for packets coming into the box itself), [1mOUTPUT [22m(for altering locally-generated packets before routing),  and
                  [1mFORWARD [22m(for altering packets being routed through the box).

[1mOPTIONS[0m
       The options that are recognized by [1miptables [22mand [1mip6tables [22mcan be divided into several different groups.

   [1mCOMMANDS[0m
       These  options specify the desired action to perform. Only one of them can be specified on the command line unless other‚Äê
       wise stated below. For long versions of the command and option names, you need to use only enough letters to ensure  that
       [1miptables [22mcan differentiate it from all other options.

       [1m-A[22m, [1m--append [4m[22mchain[24m [4mrule-specification[0m
              Append  one  or  more rules to the end of the selected chain.  When the source and/or destination names resolve to
              more than one address, a rule will be added for each possible address combination.

       [1m-C[22m, [1m--check [4m[22mchain[24m [4mrule-specification[0m
              Check whether a rule matching the specification does exist in the selected chain. This command uses the same logic
              as [1m-D [22mto find a matching entry, but does not alter the existing iptables configuration and uses its exit  code  to
              indicate success or failure.

       [1m-D[22m, [1m--delete [4m[22mchain[24m [4mrule-specification[0m
       [1m-D[22m, [1m--delete [4m[22mchain[24m [4mrulenum[0m
              Delete  one or more rules from the selected chain.  There are two versions of this command: the rule can be speci‚Äê
              fied as a number in the chain (starting at 1 for the first rule) or a rule to match.

       [1m-I[22m, [1m--insert [4m[22mchain[24m [[4mrulenum[24m] [4mrule-specification[0m
              Insert one or more rules in the selected chain as the given rule number.  So, if the rule number is 1, the rule or
              rules are inserted at the head of the chain.  This is also the default if no rule number is specified.

       [1m-R[22m, [1m--replace [4m[22mchain[24m [4mrulenum[24m [4mrule-specification[0m
              Replace a rule in the selected chain.  If the source and/or destination names resolve to multiple  addresses,  the
              command will fail.  Rules are numbered starting at 1.

       [1m-L[22m, [1m--list [22m[[4mchain[24m]
              List  all  rules in the selected chain.  If no chain is selected, all chains are listed. Like every other iptables
              command, it applies to the specified table (filter is the default), so NAT rules get listed by
               iptables -t nat -n -L
              Please note that it is often used with the [1m-n [22moption, in order to avoid long reverse DNS lookups.  It is legal  to
              specify  the [1m-Z [22m(zero) option as well, in which case the chain(s) will be atomically listed and zeroed.  The exact
              output is affected by the other arguments given. The exact rules are suppressed until you use
               iptables -L -v
              or [1miptables-save[22m(8).

       [1m-S[22m, [1m--list-rules [22m[[4mchain[24m]
              Print all rules in the selected chain.  If no chain is selected, all chains are printed like  iptables-save.  Like
              every other iptables command, it applies to the specified table (filter is the default).

       [1m-F[22m, [1m--flush [22m[[4mchain[24m]
              Flush  the  selected chain (all the chains in the table if none is given).  This is equivalent to deleting all the
              rules one by one.

       [1m-Z[22m, [1m--zero [22m[[4mchain[24m [[4mrulenum[24m]]
              Zero the packet and byte counters in all chains, or only the given chain, or only the given rule in a chain. It is
              legal to specify the [1m-L[22m, [1m--list [22m(list) option as well, to see the counters immediately before  they  are  cleared.
              (See above.)

       [1m-N[22m, [1m--new-chain [4m[22mchain[0m
              Create a new user-defined chain by the given name.  There must be no target of that name already.

       [1m-X[22m, [1m--delete-chain [22m[[4mchain[24m]
              Delete  the  chain specified.  There must be no references to the chain.  If there are, you must delete or replace
              the referring rules before the chain can be deleted.  The chain must be empty, i.e. not contain any rules.  If  no
              argument  is  given,  it  will delete all empty chains in the table. Empty builtin chains can only be deleted with
              [1miptables-nft[22m.

       [1m-P[22m, [1m--policy [4m[22mchain[24m [4mtarget[0m
              Set the policy for the built-in (non-user-defined) chain to the given target.  The policy target  must  be  either
              [1mACCEPT [22mor [1mDROP[22m.

       [1m-E[22m, [1m--rename-chain [4m[22mold-chain[24m [4mnew-chain[0m
              Rename  the  user specified chain to the user supplied name.  This is cosmetic, and has no effect on the structure
              of the table.

       [1m-h     [22mHelp.  Give a (currently very brief) description of the command syntax.

   [1mPARAMETERS[0m
       The following parameters make up a rule specification (as used in the add, delete, insert, replace and append commands).

       [1m-4[22m, [1m--ipv4[0m
              This option has no effect in iptables and iptables-restore.  If a rule using the [1m-4 [22moption is inserted  with  (and
              only  with) [1mip6tables-restore[22m, it will be silently ignored. Any other uses will throw an error. This option allows
              IPv4 and IPv6 rules in a single rule file for use with both iptables-restore and ip6tables-restore.

       [1m-6[22m, [1m--ipv6[0m
              If a rule using the [1m-6 [22moption is inserted with (and only with) [1miptables-restore[22m, it will be silently ignored.  Any
              other  uses  will  throw  an error. This option allows IPv4 and IPv6 rules in a single rule file for use with both
              iptables-restore and ip6tables-restore.  This option has no effect in ip6tables and ip6tables-restore.

       [[1m![22m] [1m-p[22m, [1m--protocol [4m[22mprotocol[0m
              The protocol of the rule or of the packet to check.  The specified protocol can be one of [1mtcp[22m, [1mudp[22m, [1mudplite[22m, [1micmp[22m,
              [1micmpv6[22m, [1mesp[22m, [1mah[22m, [1msctp[22m, [1mmh [22mor the special keyword "[1mall[22m", or it can be a numeric value, representing  one  of  these
              protocols  or  a  different  one.  A protocol name from [4m/etc/protocols[24m is also allowed.  A "!" argument before the
              protocol inverts the test.  The number zero is equivalent to [1mall[22m. "[1mall[22m" will match with all protocols and is taken
              as default when this option is omitted.  Note that, in ip6tables, IPv6 extension headers except [1mesp  [22mare  not  al‚Äê
              lowed.   [1mesp  [22mand  [1mipv6-nonext  [22mcan be used with Kernel version 2.6.11 or later.  The number zero is equivalent to
              [1mall[22m, which means that you cannot test the protocol field for the value 0 directly. To match on a HBH header,  even
              if it were the last, you cannot use [1m-p 0[22m, but always need [1m-m hbh[22m.

       [[1m![22m] [1m-s[22m, [1m--source [4m[22maddress[24m[[1m/[4m[22mmask[24m][[1m,[4m[22m...[24m]
              Source  specification.  [4mAddress[24m  can be either a network name, a hostname, a network IP address (with [1m/[4m[22mmask[24m), or a
              plain IP address. Hostnames will be resolved once only, before the rule is submitted to the kernel.   Please  note
              that specifying any name to be resolved with a remote query such as DNS is a really bad idea.  The [4mmask[24m can be ei‚Äê
              ther  an  ipv4 network mask (for iptables) or a plain number, specifying the number of 1's at the left side of the
              network mask.  Thus, an iptables mask of [4m24[24m is equivalent to [4m255.255.255.0[24m.  A "!"  argument  before  the  address
              specification  inverts  the  sense of the address. The flag [1m--src [22mis an alias for this option.  Multiple addresses
              can be specified, but this will [1mexpand to multiple rules [22m(when adding with -A), or will cause multiple rules to be
              deleted (with -D).

       [[1m![22m] [1m-d[22m, [1m--destination [4m[22maddress[24m[[1m/[4m[22mmask[24m][[1m,[4m[22m...[24m]
              Destination specification.  See the description of the [1m-s [22m(source) flag for a detailed description of the  syntax.
              The flag [1m--dst [22mis an alias for this option.

       [1m-m[22m, [1m--match [4m[22mmatch[0m
              Specifies a match to use, that is, an extension module that tests for a specific property. The set of matches make
              up  the condition under which a target is invoked. Matches are evaluated first to last as specified on the command
              line and work in short-circuit fashion, i.e. if one extension yields false, evaluation will stop.

       [1m-j[22m, [1m--jump [4m[22mtarget[0m
              This specifies the target of the rule; i.e., what to do if the packet matches it.  The target can  be  a  user-de‚Äê
              fined  chain (other than the one this rule is in), one of the special builtin targets which decide the fate of the
              packet immediately, or an extension (see [1mMATCH AND TARGET EXTENSIONS [22mbelow).  If this option is omitted in a  rule
              (and  [1m-g  [22mis  not  used), then matching the rule will have no effect on the packet's fate, but the counters on the
              rule will be incremented.

       [1m-g[22m, [1m--goto [4m[22mchain[0m
              This specifies that the processing should continue in a user specified chain. Unlike with the --jump  option,  [1mRE‚Äê[0m
              [1mTURN [22mwill not continue processing in this chain but instead in the chain that called us via --jump.

       [[1m![22m] [1m-i[22m, [1m--in-interface [4m[22mname[0m
              Name  of an interface via which a packet was received (only for packets entering the [1mINPUT[22m, [1mFORWARD [22mand [1mPREROUTING[0m
              chains).  When the "!" argument is used before the interface name, the sense is inverted.  If the  interface  name
              ends  in  a "+", then any interface which begins with this name will match.  If this option is omitted, any inter‚Äê
              face name will match.

       [[1m![22m] [1m-o[22m, [1m--out-interface [4m[22mname[0m
              Name of an interface via which a packet is going to  be  sent  (for  packets  entering  the  [1mFORWARD[22m,  [1mOUTPUT  [22mand
              [1mPOSTROUTING  [22mchains).  When the "!" argument is used before the interface name, the sense is inverted.  If the in‚Äê
              terface name ends in a "+", then any interface which begins with this name will match.  If this option is omitted,
              any interface name will match.

       [[1m![22m] [1m-f[22m, [1m--fragment[0m
              This means that the rule only refers to second and further IPv4 fragments of fragmented packets.  Since  there  is
              no  way  to tell the source or destination ports of such a packet (or ICMP type), such a packet will not match any
              rules which specify them.  When the "!" argument precedes the "-f" flag, the rule will only match head  fragments,
              or unfragmented packets. This option is IPv4 specific, it is not available in ip6tables.

       [1m-c[22m, [1m--set-counters [4m[22mpackets[24m [4mbytes[0m
              This  enables  the  administrator to initialize the packet and byte counters of a rule (during [1mINSERT[22m, [1mAPPEND[22m, [1mRE‚Äê[0m
              [1mPLACE [22moperations).

   [1mOTHER OPTIONS[0m
       The following additional options can be specified:

       [1m-v[22m, [1m--verbose[0m
              Verbose output.  This option makes the list command show the interface name, the rule options (if  any),  and  the
              TOS  masks.  The packet and byte counters are also listed, with the suffix 'K', 'M' or 'G' for 1000, 1,000,000 and
              1,000,000,000 multipliers respectively (but see the [1m-x [22mflag to change this).  For appending,  insertion,  deletion
              and replacement, this causes detailed information on the rule or rules to be printed. [1m-v [22mmay be specified multiple
              times  to  possibly emit more detailed debug statements: Specified twice, [1miptables-legacy [22mwill dump table info and
              entries in libiptc, [1miptables-nft [22mdumps rules in netlink (VM code) presentation.  Specified three times,  [1miptables-[0m
              [1mnft [22mwill also dump any netlink messages sent to kernel.

       [1m-V[22m, [1m--version[0m
              Show program version and the kernel API used.

       [1m-w[22m, [1m--wait [22m[[4mseconds[24m]
              Wait  for  the  xtables  lock.  To prevent multiple instances of the program from running concurrently, an attempt
              will be made to obtain an exclusive lock at launch.  By default, the program will exit if the lock cannot  be  ob‚Äê
              tained.   This  option  will make the program wait (indefinitely or for optional [4mseconds[24m) until the exclusive lock
              can be obtained.

       [1m-n[22m, [1m--numeric[0m
              Numeric output.  IP addresses and port numbers will be printed in numeric format.  By default,  the  program  will
              try to display them as host names, network names, or services (whenever applicable).

       [1m-x[22m, [1m--exact[0m
              Expand  numbers.   Display  the exact value of the packet and byte counters, instead of only the rounded number in
              K's (multiples of 1000), M's (multiples of 1000K) or G's (multiples of 1000M).  This option is only  relevant  for
              the [1m-L [22mcommand.

       [1m--line-numbers[0m
              When  listing  rules, add line numbers to the beginning of each rule, corresponding to that rule's position in the
              chain.

       [1m--modprobe=[4m[22mcommand[0m
              When adding or inserting rules into a chain, use [4mcommand[24m to load any necessary modules (targets, match extensions,
              etc).

[1mLOCK FILE[0m
       iptables uses the [4m/run/xtables.lock[24m file to take an exclusive lock at launch.

       The [1mXTABLES_LOCKFILE [22menvironment variable can be used to override the default setting.

[1mMATCH AND TARGET EXTENSIONS[0m
       iptables can use extended packet matching and target modules.  A list of these is available in the [1miptables-extensions[22m(8)
       manpage.

[1mDIAGNOSTICS[0m
       Various error messages are printed to standard error.  The exit code is 0 for correct functioning.  Errors  which  appear
       to be caused by invalid or abused command line parameters cause an exit code of 2. Errors which indicate an incompatibil‚Äê
       ity between kernel and user space cause an exit code of 3. Errors which indicate a resource problem, such as a busy lock,
       failing memory allocation or error messages from kernel cause an exit code of 4. Finally, other errors cause an exit code
       of 1.

[1mBUGS[0m
       Bugs?  What's this? ;-) Well, you might want to have a look at https://bugzilla.netfilter.org/ [1miptables [22mwill exit immedi‚Äê
       ately  with  an  error  code  of 111 if it finds that it was called as a setuid-to-root program.  iptables cannot be used
       safely in this manner because it trusts the shared libraries (matches, targets) loaded at run time, the search  path  can
       be set using environment variables.

[1mCOMPATIBILITY WITH IPCHAINS[0m
       This  [1miptables [22mis very similar to ipchains by Rusty Russell.  The main difference is that the chains [1mINPUT [22mand [1mOUTPUT [22mare
       only traversed for packets coming into the local host and originating from the  local  host  respectively.   Hence  every
       packet  only  passes  through  one  of  the  three  chains (except loopback traffic, which involves both INPUT and OUTPUT
       chains); previously a forwarded packet would pass through all three.

       The other main difference is that [1m-i [22mrefers to the input interface; [1m-o [22mrefers to  the  output  interface,  and  both  are
       available for packets entering the [1mFORWARD [22mchain.

       The various forms of NAT have been separated out; [1miptables [22mis a pure packet filter when using the default ‚Äòfilter' table,
       with  optional  extension  modules.   This should avoid much of the confusion over the combination of IP masquerading and
       packet filtering seen previously.  So the following options are handled differently:
        -j MASQ
        -M -S
        -M -L
       There are several other changes in iptables.

[1mSEE ALSO[0m
       [1miptables-apply[22m(8), [1miptables-save[22m(8), [1miptables-restore[22m(8), [1miptables-extensions[22m(8),

       The packet-filtering-HOWTO details iptables usage for packet filtering, the NAT-HOWTO details NAT,  the  netfilter-exten‚Äê
       sions-HOWTO details the extensions that are not in the standard distribution, and the netfilter-hacking-HOWTO details the
       netfilter internals.
       See [1mhttps://www.netfilter.org/[22m.

[1mAUTHORS[0m
       Rusty Russell originally wrote iptables, in early consultation with Michael Neuling.

       Marc Boucher made Rusty abandon ipnatctl by lobbying for a generic packet selection framework in iptables, then wrote the
       mangle table, the owner match, the mark stuff, and ran around doing cool stuff everywhere.

       James Morris wrote the TOS target, and tos match.

       Jozsef Kadlecsik wrote the REJECT target.

       Harald Welte wrote the ULOG and NFQUEUE target, the new libiptc, as well as the TTL, DSCP, ECN matches and targets.

       The  Netfilter Core Team is: Jozsef Kadlecsik, Pablo Neira Ayuso, Eric Leblond, Florian Westphal and  Arturo Borrero Gon‚Äê
       zalez.  Emeritus Core Team members are: Marc Boucher, Martin Josefsson, Yasuyuki Kozakai, James Morris, Harald Welte  and
       Rusty Russell.

       Man page originally written by Herve Eychenne <rv@wallfire.org>.

[1mVERSION[0m
       This manual page applies to iptables/ip6tables 1.8.10.

iptables 1.8.10                                                                                                      [4mIPTABLES[24m(8)
