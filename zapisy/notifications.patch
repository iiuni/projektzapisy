diff --git a/.travis.yml b/.travis.yml
index 4bb956bc..2b7160a1 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -11,6 +11,7 @@ addons:
       - yarn
 services:
   - postgresql
+  - redis
 
 install:
   - pip install -r zapisy/requirements.test.txt
diff --git a/zapisy/apps/enrollment/courses/models/group.py b/zapisy/apps/enrollment/courses/models/group.py
index 6695ba3b..840dadb4 100644
--- a/zapisy/apps/enrollment/courses/models/group.py
+++ b/zapisy/apps/enrollment/courses/models/group.py
@@ -5,7 +5,7 @@ from django.urls import reverse
 from django.conf import settings
 
 from apps.enrollment.records.exceptions import AlreadyNotAssignedException, NonGroupException, NonStudentException
-from apps.notifications.models import Notification
+from apps.notifications.custom_signals import student_pulled, student_not_pulled, teacher_changed
 
 import logging
 
@@ -107,6 +107,13 @@ class Group(models.Model):
     objects = models.Manager()
     statistics = StatisticManager()
 
+    def save(self, *args, **kw):
+        old = type(self).objects.get(pk=self.pk) if self.pk else None
+        super(Group, self).save(*args, **kw)
+        if old:
+            if old.teacher != self.teacher:
+                teacher_changed.send(sender=self.__class__, instance=self, teacher=self.teacher)
+
     def get_teacher_full_name(self):
         """return teacher's full name of current group"""
         if self.teacher is None:
@@ -136,7 +143,7 @@ class Group(models.Model):
             '8': 'Zajęcia sportowe',
             '10': 'Projekt',
         }
-        return types[self.type]
+        return types[str(self.type)]
 
     def get_terms_as_string(self):
         return ",".join(["%s %s-%s" % (x.get_dayOfWeek_display(),
@@ -303,7 +310,6 @@ class Group(models.Model):
             student=student, group=self, status=Record.STATUS_ENROLLED)
         if created:
             self.add_to_enrolled_counter(student)
-
         if commit:
             self.save()
 
@@ -394,6 +400,10 @@ class Group(models.Model):
                 current_limit = semester.get_current_limit()
                 if q.student.get_points_with_course(self.course) <= current_limit:
                     result, messages = self.add_student(q.student, return_group=True)
+
+                    if 'Student dopisany do grupy' in messages:
+                        student_pulled.send(sender=self.__class__, instance=self, user=q.student.user)
+
                     total_queues = 0
                     for old in Queue.objects.filter(
                             deleted=False,
@@ -408,29 +418,16 @@ class Group(models.Model):
                         else:
                             self.remove_from_queued_counter(q.student)
                         total_queues += 1
-                    if isinstance(result, Group):
-                        Notification.send_notification(q.student.user,
-                                                       'enrolled-again',
-                                                       {'group': self,
-                                                        'old_group': result,
-                                                        'messages': messages,
-                                                        'another_queues': total_queues - 1})
-                    else:
-                        Notification.send_notification(
-                            q.student.user, 'enrolled', {
-                                'group': self, 'messages': messages, 'another_queues': total_queues - 1})
-
                     break
+                else:
+                    student_not_pulled.send(sender=self.__class__, instance=self, user=q.student.user)
+
                 to_removed.append(q)
 
         for queue in to_removed:
             queue.deleted = True
             self.remove_from_queued_counter(queue.student)
             queue.save()
-            Notification.send_notification(queue.student.user,
-                                           'queue-remove',
-                                           {'group': self,
-                                            'reason': 'Zapis spowodowałby przekroczenie limitu ECTS'})
 
         return result
 
diff --git a/zapisy/apps/news/models.py b/zapisy/apps/news/models.py
index 26033ac7..5b93431a 100644
--- a/zapisy/apps/news/models.py
+++ b/zapisy/apps/news/models.py
@@ -3,7 +3,6 @@ from django.contrib.auth.models import User
 from django.db import models
 
 from datetime import datetime, timedelta
-from apps.notifications.models import Notification
 
 
 class NewsManager(models.Manager):
@@ -82,23 +81,6 @@ class News(models.Model):
 
     objects = NewsManager()
 
-    def save(self, *args, **kwargs):
-        try:
-            old = News.objects.get(pk=self.pk)
-        except News.DoesNotExist:
-            old = None
-
-        super(News, self).save(*args, **kwargs)
-        if self.is_published() and (old and not old.is_published() or not old):
-            Notification.send_notifications(
-                'send-news', {
-                    'news_id': self.pk,
-                    'include_direct_link': True,
-                    'subject': self.title,
-                    'body': self.body,
-                    'author': self.author
-                })
-
     def is_published(self):
         return self.category != '-'
 
diff --git a/zapisy/apps/notifications/__init__.py b/zapisy/apps/notifications/__init__.py
index e69de29b..4711a4eb 100644
--- a/zapisy/apps/notifications/__init__.py
+++ b/zapisy/apps/notifications/__init__.py
@@ -0,0 +1 @@
+default_app_config = 'apps.notifications.apps.NotificationsConfig'
diff --git a/zapisy/apps/notifications/admin.py b/zapisy/apps/notifications/admin.py
deleted file mode 100644
index a018b26a..00000000
--- a/zapisy/apps/notifications/admin.py
+++ /dev/null
@@ -1,12 +0,0 @@
-from django.contrib import admin
-from apps.notifications.models import NotificationPreferences
-
-
-class NotAdmin(admin.ModelAdmin):
-
-    list_display = ('user', 'type', 'value')
-    list_filter = ('type', 'value')
-    list_select_related = True
-
-
-admin.site.register(NotificationPreferences, NotAdmin)
diff --git a/zapisy/apps/notifications/api.py b/zapisy/apps/notifications/api.py
new file mode 100644
index 00000000..bdf97c1f
--- /dev/null
+++ b/zapisy/apps/notifications/api.py
@@ -0,0 +1,24 @@
+from typing import List
+
+from django.contrib.auth.models import User
+
+from apps.notifications.datatypes import Notification
+from apps.notifications.repositories import get_notifications_repository
+from apps.notifications.tasks import dispatch_notifications_task
+
+
+def notify_user(user: User, notification: Notification):
+    """Dispatch one notification to one user.
+
+    Repository saves notification to redis.
+    Then we queue user to send(regarding preferences) all his pending notifications, including this one.
+    """
+    repo = get_notifications_repository()
+    repo.save(user, notification)
+    dispatch_notifications_task.delay(user)
+
+
+def notify_selected_users(users: List[User], notification: Notification):
+    """Dispatch one notification to multiple users."""
+    for user in users:
+        notify_user(user, notification)
diff --git a/zapisy/apps/notifications/apps.py b/zapisy/apps/notifications/apps.py
new file mode 100644
index 00000000..93f31aa2
--- /dev/null
+++ b/zapisy/apps/notifications/apps.py
@@ -0,0 +1,8 @@
+from django.apps import AppConfig
+
+
+class NotificationsConfig(AppConfig):
+    name = "apps.notifications"
+
+    def ready(self):
+        import apps.notifications.signals
diff --git a/zapisy/apps/notifications/context_processors.py b/zapisy/apps/notifications/context_processors.py
new file mode 100644
index 00000000..77f3bf7a
--- /dev/null
+++ b/zapisy/apps/notifications/context_processors.py
@@ -0,0 +1,6 @@
+from apps.notifications.repositories import get_notifications_repository
+
+
+def notification_ico(request):
+    repo = get_notifications_repository()
+    return {"notification_counter": repo.get_count_for_user(request.user)}
diff --git a/zapisy/apps/notifications/custom_signals.py b/zapisy/apps/notifications/custom_signals.py
new file mode 100644
index 00000000..85b35ec3
--- /dev/null
+++ b/zapisy/apps/notifications/custom_signals.py
@@ -0,0 +1,6 @@
+import django.dispatch
+
+
+student_pulled = django.dispatch.Signal(providing_args=["instance", "user"])
+student_not_pulled = django.dispatch.Signal(providing_args=["instance", "user"])
+teacher_changed = django.dispatch.Signal(providing_args=["instance", "teacher"])
diff --git a/zapisy/apps/notifications/datatypes.py b/zapisy/apps/notifications/datatypes.py
new file mode 100644
index 00000000..af161dcd
--- /dev/null
+++ b/zapisy/apps/notifications/datatypes.py
@@ -0,0 +1,11 @@
+from datetime import datetime
+from typing import Dict
+
+
+class Notification:
+
+    def __init__(self, description_id: str,
+                 description_args: Dict, issued_on: datetime = datetime.now()):
+        self.description_id = description_id
+        self.description_args = description_args
+        self.issued_on = issued_on
diff --git a/zapisy/apps/notifications/exceptions.py b/zapisy/apps/notifications/exceptions.py
new file mode 100644
index 00000000..8be2accc
--- /dev/null
+++ b/zapisy/apps/notifications/exceptions.py
@@ -0,0 +1,2 @@
+class DescriptionArgumentMissingException(Exception):
+    pass
diff --git a/zapisy/apps/notifications/forms.py b/zapisy/apps/notifications/forms.py
index dc8d5e08..061b72cb 100644
--- a/zapisy/apps/notifications/forms.py
+++ b/zapisy/apps/notifications/forms.py
@@ -1,20 +1,14 @@
-from django import forms
-from django.forms.models import modelformset_factory
-from apps.notifications.models import NotificationPreferences, get_category
+from apps.notifications.models import NotificationPreferencesStudent, NotificationPreferencesTeacher
+from django.forms import ModelForm
 
 
-class NotificationForm(forms.ModelForm):
-
-    def category(self):
-        return get_category(self.instance.type)
-
+class PreferencesFormStudent(ModelForm):
     class Meta:
-        fields = ('value',)
-        model = NotificationPreferences
+        model = NotificationPreferencesStudent
+        exclude = ['user']
 
 
-NotificationFormset = modelformset_factory(
-    NotificationPreferences,
-    form=NotificationForm,
-    extra=0,
-    can_delete=False)
+class PreferencesFormTeacher(ModelForm):
+    class Meta:
+        model = NotificationPreferencesTeacher
+        exclude = ['user']
diff --git a/zapisy/apps/notifications/migrations/0001_initial.py b/zapisy/apps/notifications/migrations/0001_initial.py
index d9fa617c..594b0890 100644
--- a/zapisy/apps/notifications/migrations/0001_initial.py
+++ b/zapisy/apps/notifications/migrations/0001_initial.py
@@ -28,4 +28,4 @@ class Migration(migrations.Migration):
             name='notificationpreferences',
             unique_together=set([('user', 'type')]),
         ),
-    ]
+    ]
\ No newline at end of file
diff --git a/zapisy/apps/notifications/migrations/0002_auto_20180525_0559.py b/zapisy/apps/notifications/migrations/0002_auto_20180525_0559.py
index 2fb2891c..30e7c86b 100644
--- a/zapisy/apps/notifications/migrations/0002_auto_20180525_0559.py
+++ b/zapisy/apps/notifications/migrations/0002_auto_20180525_0559.py
@@ -1,4 +1,4 @@
-# -*- coding: utf-8 -*-
+﻿# -*- coding: utf-8 -*-
 # Generated by Django 1.11.9 on 2018-05-25 05:59
 from __future__ import unicode_literals
 
@@ -17,4 +17,4 @@ class Migration(migrations.Migration):
             name='type',
             field=models.CharField(choices=[('send-news', 'Dodano nowy news'), ('enrollment-limit', 'Podniesiono limit ECTS'), ('vote-start', 'Rozpoczęło się głosowanie'), ('grade-start', 'Rozpoczęła się ocena')], max_length=50, verbose_name='typ'),
         ),
-    ]
+    ]
\ No newline at end of file
diff --git a/zapisy/apps/notifications/migrations/0003_auto_20190125_1906.py b/zapisy/apps/notifications/migrations/0003_auto_20190125_1906.py
new file mode 100644
index 00000000..2f2677f3
--- /dev/null
+++ b/zapisy/apps/notifications/migrations/0003_auto_20190125_1906.py
@@ -0,0 +1,41 @@
+# Generated by Django 2.0.8 on 2019-01-25 19:06
+
+from django.conf import settings
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
+        ('notifications', '0002_auto_20180525_0559'),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='NotificationPreferencesStudent',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('pulled_from_queue', models.BooleanField(default=True, verbose_name='Dodano do grupy')),
+                ('added_new_group', models.BooleanField(default=True, verbose_name='Dodano nową grupe')),
+                ('teacher_has_been_changed', models.BooleanField(default=True, verbose_name='Prowadzący zmieniony')),
+                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='użytkownik')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='NotificationPreferencesTeacher',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('assigned_to_new_group_as_teacher', models.BooleanField(default=True, verbose_name='Przydzielono do grupy')),
+                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='użytkownik')),
+            ],
+        ),
+        migrations.RemoveField(
+            model_name='notificationpreferences',
+            name='user',
+        ),
+        migrations.DeleteModel(
+            name='NotificationPreferences',
+        ),
+    ]
diff --git a/zapisy/apps/notifications/migrations/0004_notificationpreferencesstudent_not_pulled_from_queue.py b/zapisy/apps/notifications/migrations/0004_notificationpreferencesstudent_not_pulled_from_queue.py
new file mode 100644
index 00000000..96635750
--- /dev/null
+++ b/zapisy/apps/notifications/migrations/0004_notificationpreferencesstudent_not_pulled_from_queue.py
@@ -0,0 +1,18 @@
+# Generated by Django 2.0.8 on 2019-01-25 20:13
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('notifications', '0003_auto_20190125_1906'),
+    ]
+
+    operations = [
+        migrations.AddField(
+            model_name='notificationpreferencesstudent',
+            name='not_pulled_from_queue',
+            field=models.BooleanField(default=True, verbose_name='Nie wciągnięto do grupy'),
+        ),
+    ]
diff --git a/zapisy/apps/notifications/migrations/0005_auto_20190205_1653.py b/zapisy/apps/notifications/migrations/0005_auto_20190205_1653.py
new file mode 100644
index 00000000..83628784
--- /dev/null
+++ b/zapisy/apps/notifications/migrations/0005_auto_20190205_1653.py
@@ -0,0 +1,38 @@
+# Generated by Django 2.0.8 on 2019-02-05 16:53
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('notifications', '0004_notificationpreferencesstudent_not_pulled_from_queue'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='notificationpreferencesstudent',
+            name='added_new_group',
+            field=models.BooleanField(default=True, verbose_name='Dodanie nowej grupy przedmiotu, na który jesteś zapisany'),
+        ),
+        migrations.AlterField(
+            model_name='notificationpreferencesstudent',
+            name='not_pulled_from_queue',
+            field=models.BooleanField(default=True, verbose_name='Anulowanie wciągnięcia do grupy'),
+        ),
+        migrations.AlterField(
+            model_name='notificationpreferencesstudent',
+            name='pulled_from_queue',
+            field=models.BooleanField(default=True, verbose_name='Wciągnięcie do grupy'),
+        ),
+        migrations.AlterField(
+            model_name='notificationpreferencesstudent',
+            name='teacher_has_been_changed',
+            field=models.BooleanField(default=True, verbose_name='Zmiana prowadzącego grupy z przedmiotu, na który jesteś zapisany'),
+        ),
+        migrations.AlterField(
+            model_name='notificationpreferencesteacher',
+            name='assigned_to_new_group_as_teacher',
+            field=models.BooleanField(default=True, verbose_name='Przydzielenie do grupy'),
+        ),
+    ]
diff --git a/zapisy/apps/notifications/models.py b/zapisy/apps/notifications/models.py
index 559e1d41..14ff867c 100644
--- a/zapisy/apps/notifications/models.py
+++ b/zapisy/apps/notifications/models.py
@@ -1,213 +1,31 @@
-from django.contrib.auth.models import User
-from django.db import models
-from django.template.loader import render_to_string
-from django.utils.html import strip_tags
-from mailer.models import Message
-from apps.users.models import Employee, Student, BaseUser
-
-NOTIFICATION_TYPES = (
-    ('News', {
-        'all': [
-            ('send-news', 'Dodano nowy news'),
-            #('send-dev-news', u'Dodano nowy news developerski'),
-        ],
-        'student': [
-            #('send-user_change', u'Nastąpiła automatyczna zmiana Twoich danych w systemie')
-        ],
-        'employee': []
-    }),
-    ('Przedmioty', {
-        'all': [
-            #('course-new_semester', u'Pojawiły się przedmioty na przyszły semestr'),
-            #('courses-new_schedule', u'Pojawił się plan na następny semestr'),
-            #('course-message', u'Wykładowca napisał nową wiadomość do zapisanych'),
-        ],
-        'student': [
-            #('change-group-time', u'Zmieniono termin grupy, do której jesteś zapisany/a'),
-            #('change-group-time-q', u'Zmieniono termin grupy, do której jesteś w kolejce'),
-            #('change-course', u'Zmieniono opis przedmiotu na który jesteś zapisany/a'),
-            #('change-course-q', u'Zmieniono opis przedmiotu, do którego stoisz w kolejce'),
-            #('change-course-p', u'Zmieniono opis przedmiotu przypiętego przez Ciebie do planu'),
-            #('group-message', u'Prowadzący napisał nową wiadomość do grupy'),
-        ],
-        'employee': [
-            #('change-course-teacher', u'Zmieniono opis przedmiotu z którego prowadzisz zajęcia'),
-        ]
-    }),
-    ('Zapisy', {
-        'all': [
-        ],
-        'student': [
-            #('enrollment-t0', u'Ustalono Twój czas otwarcia zapisów'),
-            #('enrolled', u'Nastąpiło zapisanie do grupy'),
-            #('enrolled-again', u'Nastąpiło przepisanie do grupy'),
-            #('enrolled-remove', u'Nastąpiło wypisanie z grupy'),
-            #('queue-remove', u'Nastąpiło wypisanie z kolejki'),
-            #('enrollment-finish', u'Pozostały 24 godziny do końca zapisów'),
-            #('enrollment-finish-dir', u'Pozostały 24 godziny do końca wypisów dyrektorskich'),
-            #('enrollment-started', u'Twoje zapisy się rozpoczęły'),
-            ('enrollment-limit', 'Podniesiono limit ECTS'),
-        ],
-        'employee': [
-            #('student-enrolled', u'Po pierwszym tygodniu do grupy dołączył nowy student'),
-            #('student-removed', u'Po pierwszym tygodniu z grupy wypisał się student')
-        ]
-    }),
-    ('Oferta', {
-        'all': [
-            #('desiderata', u'Przypomnienie o wypełnieniu dezyderaty'),
-            #('preferences', u'Przypomnienie o aktualizacji preferencji'),
-            #('offer', u'Przypomnienie o aktualizacji oferty')
-        ],
-        'student': [
-            ('vote-start', 'Rozpoczęło się głosowanie'),
-            #('vote-finish', u'Zostało 24 godziny do końca głosowania'),
-            #('vote-correction', u'Rozpoczęła się korekta głosowania'),
-            #('vote-correction-finish', u'Zostało 24 godziny do końca korekty'),
-            #('vote-summary', u'Wyślij podsumowanie oddanego głosu'),
-            ('grade-start', 'Rozpoczęła się ocena')
-            #('grade-finish', u'Pozostało 24 godzin do końca oceny'),
-            #('grade-info', u'Wyślij potwierdzenie wygenerowania kluczy')
-        ],
-        'employee': []
-    }),
-    ('Wydarzenia', {
-        'all': [
-            #('new-event', u'Dodano nowe wydarzenie w Instytucie'),
-            #('new-cancell', u'Interesujące Cię wydarzenie zostało odwołane'),
-            #('new-finish', u'Interesujące Cię wydarzenie odbędzie się jutro'),
-            #('message-in-event', u'Organizator wydarzenia napisał nową wiadomość'),
-            #('new-zosia', u'Wyślij informacje o rozpoczęciu zapisów na nową ZOSIę')
-        ],
-        'student': [
-            #('exam-info', u'Ustalono termin egzaminu lub kolokwium z przedmiotu na który jesteś zapisany/a'),
-        ],
-        'employee': [
-            #('exam-info-e', u'Ustalono termin egzaminu lub kolokwium z przedmiotu do którego prowadzisz zajęcia'),
-        ]
-    }),
-    ('Wnioski', {
-        'all': [
-            #('petition-accepted', u'Twój wniosek został zaakceptowany'),
-            #('petition-deny', u'Twój wniosek został odrzucony')
-        ],
-        'student': [],
-        'employee': []
-    })
-)
-
-_categorycache = {}
-
-
-def get_category(type_name):
-    if not _categorycache:
-        for t in NOTIFICATION_TYPES:
-            for item in t[1]['all']:
-                _categorycache[item[0]] = t[0]
-
-            for item in t[1]['student']:
-                _categorycache[item[0]] = t[0]
-
-            for item in t[1]['employee']:
-                _categorycache[item[0]] = t[0]
-
-    return _categorycache[type_name]
-
-
-def types_list(student=False, employee=False):
-    types = []
-
-    for elem in NOTIFICATION_TYPES:
-        types.extend(elem[1]['all'])
-
-        if student:
-            types.extend(elem[1]['student'])
-
-        if employee:
-            types.extend(elem[1]['employee'])
-
-    return types
+from typing import List
 
+from django.db import models
+from django.contrib.auth.models import User
 
-class NotificationManager(models.Manager):
-
-    def create_and_get(self, user):
-        types = types_list(BaseUser.is_student(user), BaseUser.is_employee(user))
-        used = self.filter(user=user).distinct().values_list('type', flat=True)
-        new_objects = []
-
-        for t in types:
-            if not t[0] in used:
-                new_objects.append(NotificationPreferences(user=user, type=t[0]))
+from apps.enrollment.courses.models.group import Group
+from apps.enrollment.records.models import Record, Queue
 
-        self.bulk_create(new_objects)
 
-        return self.filter(user=user)
+def get_all_users_in_course_groups(course_groups: List[Group]):
+    queues = Queue.objects.filter(group__in=course_groups, deleted=False).select_related(
+        'student', 'student__user')
+    records = Record.objects.filter(group__in=course_groups, status=1).select_related(
+        'student', 'student__user')
 
-    @classmethod
-    def user_has_notification_on(cls, user, notification):
-        try:
-            preference = NotificationPreferences.objects.get(user=user, type=notification)
-            return preference.value
-        except NotificationPreferences.DoesNotExist:
-            return False
+    return {element.student.user for element in queues} | {element.student.user for element in records}
 
 
-class NotificationPreferences(models.Model):
+class NotificationPreferencesStudent(models.Model):
     user = models.ForeignKey(User, verbose_name='użytkownik', on_delete=models.CASCADE)
-    type = models.CharField(choices=types_list(True, True), max_length=50, verbose_name='typ')
-    value = models.BooleanField(default=True, verbose_name='wartość')
-
-    objects = NotificationManager()
-
-    class Meta:
-        unique_together = ('user', 'type')
-
-        ordering = ['id']
-        verbose_name = 'Ustawienie Notyfikacji'
-        verbose_name_plural = 'Ustawienia Notyfikacji'
+    pulled_from_queue = models.BooleanField(default=True, verbose_name='Wciągnięcie do grupy')
+    not_pulled_from_queue = models.BooleanField(default=True, verbose_name='Anulowanie wciągnięcia do grupy')
+    added_new_group = models.BooleanField(default=True, verbose_name='Dodanie nowej grupy przedmiotu, na który jesteś '
+                                                                     'zapisany')
+    teacher_has_been_changed = models.BooleanField(default=True, verbose_name='Zmiana prowadzącego grupy z przedmiotu, '
+                                                                              'na który jesteś zapisany')
 
 
-def send_message_internal(email, subject, body_html):
-    body_plaintext = strip_tags(body_html)
-    Message.objects.create(
-        to_address=email, subject=subject,
-        message_body=body_plaintext, message_body_html=body_html)
-
-
-class Notification(object):
-    @classmethod
-    def send_notification(cls, user, notification, context):
-        context['user'] = user
-        preference = NotificationManager.user_has_notification_on(user, notification)
-        if user.email and preference:
-            body_html = render_to_string("notifications/{0}.html".format(notification), context)
-            send_message_internal(user.email, preference.get_type_display(), body_html)
-
-    @classmethod
-    def send_notifications(cls, notification, context={}):
-        """
-        Sends given notification to all subscribed users.
-        """
-
-        def _find_notification_name(notification):
-            types = types_list(True, True)
-            for type in types:
-                if type[0] == notification:
-                    return type[1]
-            return ''
-
-        def _send_to_users(users, notification, subject, context):
-            for u in users:
-                preference = NotificationManager.user_has_notification_on(u.user, notification)
-                address = u.user.email
-                if address and preference:
-                    context['user'] = u.user
-                    body_html = render_to_string(
-                        "notifications/{0}.html".format(notification), context)
-                    send_message_internal(address, subject, body_html)
-
-        subject = context['subject'] if 'subject' in context else _find_notification_name(
-            notification)
-        _send_to_users(Employee.get_actives(), notification, subject, context)
-        _send_to_users(Student.get_active_students(), notification, subject, context)
+class NotificationPreferencesTeacher(models.Model):
+    user = models.ForeignKey(User, verbose_name='użytkownik', on_delete=models.CASCADE)
+    assigned_to_new_group_as_teacher = models.BooleanField(default=True, verbose_name='Przydzielenie do grupy')
diff --git a/zapisy/apps/notifications/repositories.py b/zapisy/apps/notifications/repositories.py
new file mode 100644
index 00000000..f7aea050
--- /dev/null
+++ b/zapisy/apps/notifications/repositories.py
@@ -0,0 +1,122 @@
+from abc import ABC, abstractmethod
+from datetime import datetime
+from typing import List
+
+from django.conf import settings
+from django.contrib.auth.models import User
+import redis
+
+from apps.notifications.datatypes import Notification
+from apps.notifications.serialization import (
+    JsonNotificationSerializer,
+    NotificationSerializer,
+)
+
+
+class NotificationsRepository(ABC):
+
+    @abstractmethod
+    def get_count_for_user(self, user: User) -> int:
+        pass
+
+    @abstractmethod
+    def get_all_for_user(self, user: User) -> List[Notification]:
+        pass
+
+    @abstractmethod
+    def get_unsent_for_user(self, user: User) -> List[Notification]:
+        pass
+
+    @abstractmethod
+    def mark_as_sent(self, user: User, notification: Notification) -> None:
+        pass
+
+    @abstractmethod
+    def save(self, user: User, notification: Notification) -> None:
+        pass
+
+    @abstractmethod
+    def remove_all_older_than(self, user: User, until: datetime) -> int:
+        pass
+
+
+class RedisNotificationsRepository(NotificationsRepository):
+
+    def __init__(self, serializer: NotificationSerializer):
+        self.serializer = serializer
+        self.redis_client = redis.Redis()
+        self.removed_count = 0
+
+    def get_count_for_user(self, user: User) -> int:
+        # SCARD returns 0 if one of them does not exist
+        # so no need to check for key existence here
+        unsent_count = self.redis_client.scard(
+            self._generate_unsent_key_for_user(user))
+        sent_count = self.redis_client.scard(
+            self._generate_sent_key_for_user(user))
+
+        return unsent_count + sent_count
+
+    def get_all_for_user(self, user: User) -> List[Notification]:
+        serialized = self.redis_client.smembers(
+            self._generate_unsent_key_for_user(user))
+        serialized = serialized.union(
+            self.redis_client.smembers(self._generate_sent_key_for_user(user)))
+
+        return list(map(self.serializer.deserialize, serialized))
+
+    def get_unsent_for_user(self, user: User) -> List[Notification]:
+        return list(map(
+            self.serializer.deserialize,
+            self.redis_client.smembers(self._generate_unsent_key_for_user(user))))
+
+    def mark_as_sent(self, user: User, notification: Notification) -> None:
+        serialized = self.serializer.serialize(notification)
+
+        self.redis_client.srem(
+            self._generate_unsent_key_for_user(user), serialized)
+        self.redis_client.sadd(
+            self._generate_sent_key_for_user(user), serialized)
+
+    def save(self, user: User, notification: Notification) -> None:
+        self.redis_client.sadd(
+            self._generate_unsent_key_for_user(user),
+            self.serializer.serialize(notification))
+
+    def remove_all_older_than(self, user: User, until: datetime) -> int:
+        self.removed_count = 0
+
+        self._remove_all_older_than(
+            self._generate_unsent_key_for_user(user), until)
+        self._remove_all_older_than(
+            self._generate_sent_key_for_user(user), until)
+
+        return self.removed_count
+
+    def _remove_all_older_than(self, key: str, point_in_time: datetime) -> int:
+        notifications_under_that_key = map(
+            self.serializer.deserialize,
+            self.redis_client.smembers(key))
+
+        for notification in notifications_under_that_key:
+            if notification.issued_on < point_in_time:
+                self.redis_client.srem(
+                    key, self.serializer.serialize(notification))
+                self.removed_count += 1
+
+    def _generate_unsent_key_for_user(self, user: User) -> str:
+        return f'notifications:unsent#{user.id}'
+
+    def _generate_sent_key_for_user(self, user: User) -> str:
+        return f'notifications:sent#{user.id}'
+
+
+def get_notifications_repository() -> NotificationsRepository:
+    """
+    Return an object implementing NotificationsRepository interface,
+    thus providing access to _some_ notifications storage.
+    Client code should always call this method instead of
+    instantiating such classes directly.
+    """
+
+    return RedisNotificationsRepository(JsonNotificationSerializer())
diff --git a/zapisy/apps/notifications/serialization.py b/zapisy/apps/notifications/serialization.py
new file mode 100644
index 00000000..24fda897
--- /dev/null
+++ b/zapisy/apps/notifications/serialization.py
@@ -0,0 +1,40 @@
+from abc import ABC, abstractmethod
+from datetime import datetime
+import json
+
+from apps.notifications.datatypes import Notification
+
+
+class NotificationSerializer(ABC):
+
+    @abstractmethod
+    def serialize(self, notification: Notification) -> str:
+        pass
+
+    @abstractmethod
+    def deserialize(self, serialized: str) -> Notification:
+        pass
+
+
+class JsonNotificationSerializer(NotificationSerializer):
+
+    def __init__(self):
+        # year-month-day hour:minute:second.microsecond
+        self.DATE_TIME_FORMAT = '%Y-%m-%d %H:%M:%S.%f'
+
+    def serialize(self, notification: Notification) -> str:
+        # since the datetime type isn't properly serialized by the
+        # standard library we need to process it manually
+        json_friendly_issued_on = notification.issued_on.strftime(
+            self.DATE_TIME_FORMAT)
+        return json.dumps({
+            'issued_on': json_friendly_issued_on,
+            'description_id': notification.description_id,
+            'description_args': notification.description_args,
+        }, sort_keys=True, indent=None)
+
+    def deserialize(self, serialized: str) -> Notification:
+        notification_as_dict = json.loads(serialized)
+        notification_as_dict['issued_on'] = datetime.strptime(
+            notification_as_dict['issued_on'], self.DATE_TIME_FORMAT)
+        return Notification(**notification_as_dict)
diff --git a/zapisy/apps/notifications/signals.py b/zapisy/apps/notifications/signals.py
new file mode 100644
index 00000000..2673c5f9
--- /dev/null
+++ b/zapisy/apps/notifications/signals.py
@@ -0,0 +1,83 @@
+from django.db.models.signals import post_save
+from django.dispatch import receiver
+
+from apps.notifications.datatypes import Notification
+from apps.enrollment.courses.models.group import Group
+from apps.notifications.api import notify_user, notify_selected_users
+from apps.notifications.models import get_all_users_in_course_groups
+from apps.notifications.custom_signals import student_pulled, student_not_pulled, teacher_changed
+from apps.notifications.templates import NotificationType
+
+
+@receiver(post_save, sender=Group)
+def notify_that_group_was_added_in_course(sender: Group, **kwargs) -> None:
+    group = kwargs['instance']
+    if kwargs['created'] and group.course.information:
+        course_groups = Group.objects.filter(course=group.course)
+        course_name = group.course.information.entity.name
+
+        teacher = group.teacher.user
+        notify_user(
+            teacher,
+            Notification(NotificationType.ASSIGNED_TO_NEW_GROUP_AS_A_TEACHER,
+                         {'course_name': course_name}))
+
+        users = get_all_users_in_course_groups(course_groups)
+        notify_selected_users(
+            users,
+            Notification(NotificationType.ADDED_NEW_GROUP, {
+                'course_name': course_name,
+                'teacher': teacher.get_full_name()
+            }))
+
+
+@receiver(student_pulled, sender=Group)
+def notify_that_user_was_pulled_from_queue(sender: Group, **kwargs) -> None:
+    group = kwargs['instance']
+
+    notify_user(
+        kwargs['user'],
+        Notification(
+            NotificationType.PULLED_FROM_QUEUE, {
+                'course_name': group.course.information.entity.name,
+                'teacher': group.teacher.user.get_full_name(),
+                'type': group.human_readable_type().lower()
+            }))
+
+
+@receiver(student_not_pulled, sender=Group)
+def notify_that_user_was_not_pulled_from_queue(sender: Group,
+                                               **kwargs) -> None:
+    group = kwargs['instance']
+
+    notify_user(
+        kwargs['user'],
+        Notification(
+            NotificationType.NOT_PULLED_FROM_QUEUE, {
+                'course_name': group.course.information.entity.name,
+                'teacher': group.teacher.user.get_full_name(),
+                'type': group.human_readable_type().lower()
+            }))
+
+
+@receiver(teacher_changed, sender=Group)
+def notify_that_teacher_was_changed(sender: Group, **kwargs) -> None:
+    group = kwargs['instance']
+
+    teacher = group.teacher.user
+    course_name = group.course.information.entity.name
+
+    notify_user(
+        teacher,
+        Notification(NotificationType.ASSIGNED_TO_NEW_GROUP_AS_A_TEACHER,
+                     {'course_name': course_name}))
+
+    users = get_all_users_in_course_groups([group])
+    notify_selected_users(
+        users,
+        Notification(
+            NotificationType.TEACHER_HAS_BEEN_CHANGED, {
+                'course_name': course_name,
+                'teacher': teacher.get_full_name(),
+                'type': group.human_readable_type().lower()
+            }))
diff --git a/zapisy/apps/notifications/tasks.py b/zapisy/apps/notifications/tasks.py
new file mode 100644
index 00000000..e2797377
--- /dev/null
+++ b/zapisy/apps/notifications/tasks.py
@@ -0,0 +1,45 @@
+from django.conf import settings
+from django.core.mail import send_mail
+from django.template.loader import render_to_string
+from django_rq import job
+
+from apps.notifications.repositories import get_notifications_repository
+from apps.notifications.utils import render_description
+from apps.notifications.models import NotificationPreferencesStudent, NotificationPreferencesTeacher
+from apps.users.models import BaseUser
+
+
+@job('dispatch-notifications')
+def dispatch_notifications_task(user):
+    """Dispatch all pending notifications for the given user.
+
+    It's purposedly designed around processing all notification_s_
+    at a time instead of handling them one by one
+    so we can introduce a rate-limit and/or batch them together
+    should there ever be a need to do so.
+    """
+    if BaseUser.is_employee(user):
+        model, created = NotificationPreferencesTeacher.objects.get_or_create(user=user)
+    else:
+        model, created = NotificationPreferencesStudent.objects.get_or_create(user=user)
+
+    repo = get_notifications_repository()
+    pending_notifications = repo.get_unsent_for_user(user)
+
+    for pn in pending_notifications:
+        if not getattr(model, pn.description_id):
+            continue
+
+        ctx = {
+            'content': render_description(
+                pn.description_id, pn.description_args),
+            'greeting': f'Dzień dobry, {user.first_name}',
+        }
+
+        send_mail(
+            'Wiadomość od Systemu Zapisów IIUWr',  # FIXME (?)
+            render_to_string('notifications/email_base.html', ctx),
+            settings.MASS_MAIL_FROM,
+            [user.email])
+
+        repo.mark_as_sent(user, pn)
diff --git a/zapisy/apps/notifications/templates.py b/zapisy/apps/notifications/templates.py
new file mode 100644
index 00000000..39120c1c
--- /dev/null
+++ b/zapisy/apps/notifications/templates.py
@@ -0,0 +1,26 @@
+from enum import Enum
+
+
+class NotificationType(str, Enum):
+    PULLED_FROM_QUEUE = 'pulled_from_queue'
+    NOT_PULLED_FROM_QUEUE = 'not_pulled_from_queue'
+    ADDED_NEW_GROUP = 'added_new_group'
+    ASSIGNED_TO_NEW_GROUP_AS_A_TEACHER = 'assigned_to_new_group_as_teacher'
+    TEACHER_HAS_BEEN_CHANGED = 'teacher_has_been_changed'
+
+
+mapping = {
+    NotificationType.PULLED_FROM_QUEUE:
+    'Nastąpiło wciągnięcie Cię do grupy przedmiotu {course_name}, gdzie prowadzący to {teacher} a '
+    'typ grupy {type}.',
+    NotificationType.NOT_PULLED_FROM_QUEUE:
+    'Proces wciągania Cię do grupy przedmiotu {course_name}, gdzie prowadzący to {teacher} a '
+    'typ grupy {type}, został anulowany, ze względu na przekroczenie limitu ECTS.',
+    NotificationType.ADDED_NEW_GROUP:
+    'W przedmiocie {course_name} została dodana grupa prowadzona przez {teacher}.',
+    NotificationType.ASSIGNED_TO_NEW_GROUP_AS_A_TEACHER:
+    'Przydzielono Cię do grupy przedmiotu {course_name} jako prowadzącego.',
+    NotificationType.TEACHER_HAS_BEEN_CHANGED:
+    'Nastąpiła zmiana prowadzacego w grupie przedmiotu {course_name}, gdzie typ grupy to '
+    '{type}, na {teacher}.',
+}
diff --git a/zapisy/apps/notifications/templates/notifications/base.html b/zapisy/apps/notifications/templates/notifications/base.html
deleted file mode 100644
index e1259137..00000000
--- a/zapisy/apps/notifications/templates/notifications/base.html
+++ /dev/null
@@ -1,20 +0,0 @@
-<!DOCTYPE html>
-<html>
-<head>
-  <title>{{ subject }}</title>
-</head>
-<body>
-Cześć {{ user.first_name }},<br>
-<br>
-{% block content %}
-{% endblock %}
-<br><br>
-Zespół zapisy.ii.uni.wroc.pl<br>
-<br>
----<br>
-{% if include_direct_link %}<a href="https://zapisy.ii.uni.wroc.pl/news/{{ news_id }}">Wyświetl na stronie zapisów</a><br>{% endif %}
-Wiadomość wygenerowana automatycznie. Treść może ulec zmianie.<br>
-Jeśli nie chcesz otrzymywać więcej powiadomień tego typu, zaktualizuj opcje w swoim profilu (https://zapisy.ii.uni.wroc.pl/users).<br>
-
-</body>
-</html>
diff --git a/zapisy/apps/notifications/templates/notifications/email_base.html b/zapisy/apps/notifications/templates/notifications/email_base.html
new file mode 100644
index 00000000..40c5c20b
--- /dev/null
+++ b/zapisy/apps/notifications/templates/notifications/email_base.html
@@ -0,0 +1,13 @@
+<!DOCTYPE html>
+<html>
+    <body>
+        {{ greeting }},<br>
+        <br>
+        {{ content }}
+        <br><br>
+        Zespół zapisy.ii.uni.wroc.pl<br>
+        <br>
+        ---<br>
+        Jeśli nie chcesz otrzymywać więcej powiadomień tego typu, zaktualizuj opcje w swoim profilu (https://zapisy.ii.uni.wroc.pl/users).<br>
+    </body>
+</html>
diff --git a/zapisy/apps/notifications/templates/notifications/enrolled-again.html b/zapisy/apps/notifications/templates/notifications/enrolled-again.html
deleted file mode 100644
index 90cc62e3..00000000
--- a/zapisy/apps/notifications/templates/notifications/enrolled-again.html
+++ /dev/null
@@ -1,6 +0,0 @@
-Nastąpił automatyczne przepisanie do grupy: {{ group.long_print }} - https://zapisy.ii.uni.wroc.pl{{ group.get_absolute_url }}
-
-Poprzednia grupa: {{ old_group.long_print }} - https://zapisy.ii.uni.wroc.pl{{ old_group.get_absolute_url }}
-
-
-{% if another_queues > 0 %}Wypisano również z {{ another_queues }} kolejek o niższym priorytecie{% endif %}
diff --git a/zapisy/apps/notifications/templates/notifications/enrolled.html b/zapisy/apps/notifications/templates/notifications/enrolled.html
deleted file mode 100644
index 3cb73566..00000000
--- a/zapisy/apps/notifications/templates/notifications/enrolled.html
+++ /dev/null
@@ -1,5 +0,0 @@
-Nastąpił automatyczny zapis do grupy: {{ group.long_print }} - https://zapisy.ii.uni.wroc.pl{{ group.get_absolute_url }}
-
-
-
-{% if another_queues > 0 %}Wypisano również z {{ another_queues }} kolejek o niższym priorytecie{% endif %}
\ No newline at end of file
diff --git a/zapisy/apps/notifications/templates/notifications/enrollment-limit.html b/zapisy/apps/notifications/templates/notifications/enrollment-limit.html
deleted file mode 100644
index 0f95a7f7..00000000
--- a/zapisy/apps/notifications/templates/notifications/enrollment-limit.html
+++ /dev/null
@@ -1,6 +0,0 @@
-{% extends "notifications/base.html" %}
-{% block content %}
-Limit {{ ECTS_LIMIT }} punktów ECTS został automatycznie zniesiony.
-Pamiętaj, że dalej obowiązuje stały limit {{ ECTS_FINAL_LIMIT }} punktów ECTS.
-{% endblock %}
-
diff --git a/zapisy/apps/notifications/templates/notifications/grade-start.html b/zapisy/apps/notifications/templates/notifications/grade-start.html
deleted file mode 100644
index 3d569f8d..00000000
--- a/zapisy/apps/notifications/templates/notifications/grade-start.html
+++ /dev/null
@@ -1,6 +0,0 @@
-{% extends "notifications/base.html" %}
-
-{% block content %}
-Rozpoczęła się ocena zajęć. Dokładne informacje oraz klucze do przeprowadzenia oceny znajdziesz na stronie: https://zapisy.ii.uni.wroc.pl/grade/.
-Przypominamy, że udział w ocenie zajęć daje bonus -24h do zapisów w obu semestrach następnego roku akademickiego.
-{% endblock %}
diff --git a/zapisy/apps/notifications/templates/notifications/index.html b/zapisy/apps/notifications/templates/notifications/index.html
index 4f565900..ad46da58 100644
--- a/zapisy/apps/notifications/templates/notifications/index.html
+++ b/zapisy/apps/notifications/templates/notifications/index.html
@@ -1,60 +1,29 @@
-{% extends "base.html" %}
+{% extends "common/index.html" %}
 
-{% load fereol_common %}
-{% load compressed %}
 {% block main-subtitle %}Powiadomienia{% endblock %}
 
-{% block head_extra %}
-<style>
-  li.send-notification
-  {
-    line-height: 35px;
-  }
-</style>
-{% endblock %}
-
-{% block content-class %}narrow{% endblock %}
-
 {% block bread %}
-    <a href="/">Strona główna</a>  &raquo;
-    Powiadomienia
+<a href="/">Strona główna</a> &raquo;
+Powiadomienia
 {% endblock %}
 
-{% block content %}
-    <h2>Powiadomienia</h2>
-    <div id="notifications-content">
-        <ul>
-            <li class="send-notification">
-                Rozpoczęcie głosowania:
-                <br>
-                <form method="post" action="{% url 'notifications:vote_start' %}">
-                    {% csrf_token %}
-
-                    <p>
-                        Rok akademicki:
-                        <input type="number" id="year" name="year" class="small" value="{{ year }}" />
-                    </p>
-
-                    <p>
-                        Rodzaj głosowania:
-                        <select name="which" id="which" class="small">
-                            <option value="main">Główne</option>
-                            <option value="winter">Korekta zimowa</option>
-                            <option value="summer">Korekta letnia</option>
-                        </select>
-                    </p>
-
-                    <input type="submit" value="Wyślij" class="btn" onclick="return confirm('Czy na pewno wysłać powiadomienia?')" />
-                </form>
-            </li>
-            <li class="send-notification">
-                Rozpoczęcie oceny zajęć:
-                <a class="btn" onclick="return confirm('Czy na pewno wysłać powiadomienie?')" href="{% url 'notifications:grade_start' %}">Wyślij</a><br>
-            </li>
-            <li class="send-notification">
-                Podniesiono limit ECTS:
-                <a class="btn" onclick="return confirm('Czy na pewno wysłać powiadomienia?')" href="{% url 'notifications:enrollment_limit' %}">Wyślij</a><br>
-            </li>
-        </ul>
-    </div>
+{% block center %}
+<div class="notifications-list">
+    <h3>Lista powiadomień</h3>
+    {% if notifications %}
+    <ol>
+        {% for notification in notifications %}
+        <li>{{ notification }}</li>
+        {% endfor %}
+    </ol>
+    {% else %}
+    <p>jest pusta</p>
+    {% endif %}
+</div>
+
+<hr>
+<div class="notifications-preferences">
+    <h3>Ustawienia</h3>
+    <p>Jeśli chcesz wyłączyć powiadomienia mailowe <a href="{% url 'notifications:preferences' %}"> >> Preferencje</a></p>
+</div>
 {% endblock %}
diff --git a/zapisy/apps/notifications/templates/notifications/preferences.html b/zapisy/apps/notifications/templates/notifications/preferences.html
new file mode 100644
index 00000000..182eb80d
--- /dev/null
+++ b/zapisy/apps/notifications/templates/notifications/preferences.html
@@ -0,0 +1,21 @@
+{% extends "common/index.html" %}
+
+{% block main-subtitle %}Powiadomienia{% endblock %}
+
+{% block bread %}
+<a href="/">Strona główna</a> &raquo; Powiadomienia &raquo; Preferencje
+{% endblock %}
+
+{% block center %}
+
+<h2>Preferencje</h2>
+<p>O czym chcesz być informowany mailowo?</p>
+<form method="POST" action="{% url 'notifications:preferences-save' %}">
+    {% csrf_token %}
+    <table class="table">
+    {{ form.as_table }}
+    </table>
+    <button type="submit">Wyślij</button>
+</form>
+
+{% endblock %}
diff --git a/zapisy/apps/notifications/templates/notifications/queue-remove.html b/zapisy/apps/notifications/templates/notifications/queue-remove.html
deleted file mode 100644
index af61af82..00000000
--- a/zapisy/apps/notifications/templates/notifications/queue-remove.html
+++ /dev/null
@@ -1,5 +0,0 @@
-Nastąpił automatyczne wypisanie z kolejki do grupy: {{ group.long_print }} - https://zapisy.ii.uni.wroc.pl{{ group.get_absolute_url }}
-
-{% if reason %}
-    Powód: {{ reason }}
-{% endif %}
diff --git a/zapisy/apps/notifications/templates/notifications/send-news.html b/zapisy/apps/notifications/templates/notifications/send-news.html
deleted file mode 100644
index c8a5c1c9..00000000
--- a/zapisy/apps/notifications/templates/notifications/send-news.html
+++ /dev/null
@@ -1,7 +0,0 @@
-{% extends "notifications/base.html" %}
-
-{% block content %}
-{{ body|safe }}
-
-{{ author.get_full_name }} 
-{% endblock %}
diff --git a/zapisy/apps/notifications/templates/notifications/vote-start.html b/zapisy/apps/notifications/templates/notifications/vote-start.html
deleted file mode 100644
index 58ca0e6b..00000000
--- a/zapisy/apps/notifications/templates/notifications/vote-start.html
+++ /dev/null
@@ -1,7 +0,0 @@
-{% extends "notifications/base.html" %}
-
-{% block content %}
-Głosowanie na przedmioty jest już aktywne. Możesz zagłosować na stronie: https://zapisy.ii.uni.wroc.pl/vote/
-
-Planowany koniec głosowania: {{ end_of_vote_date }}.
-{% endblock %}
diff --git a/zapisy/apps/notifications/tests/__init__.py b/zapisy/apps/notifications/tests/__init__.py
new file mode 100644
index 00000000..e69de29b
diff --git a/zapisy/apps/notifications/tests/test_emails.py b/zapisy/apps/notifications/tests/test_emails.py
new file mode 100644
index 00000000..e8c934b3
--- /dev/null
+++ b/zapisy/apps/notifications/tests/test_emails.py
@@ -0,0 +1,33 @@
+from django.core import mail
+from django.test import TestCase, override_settings
+from django.template.loader import render_to_string
+
+from apps.enrollment.courses.tests.factories import GroupFactory, CourseFactory
+from apps.users.tests.factories import StudentFactory
+from apps.notifications.templates import NotificationType
+from apps.notifications.utils import render_description
+from apps.notifications.custom_signals import student_pulled
+
+from apps.enrollment.courses.models.group import Group
+
+
+@override_settings(RUN_ASYNC=False)
+class NotificationsEmailTestCase(TestCase):
+    def test_pulled_from_queue(self):
+        student = StudentFactory()
+        course = CourseFactory()
+        group = GroupFactory(course=course)
+        mail.outbox = []
+
+        student_pulled.send(sender=Group, instance=group, user=student.user)
+
+        ctx = {
+            'content': render_description(NotificationType.PULLED_FROM_QUEUE, {
+                "course_name": group.course.information.entity.name,
+                "teacher": group.teacher.user.get_full_name(),
+                "type": group.human_readable_type().lower()
+            }),
+            'greeting': f'Dzień dobry, {student.user.first_name}',
+        }
+        self.assertEqual(len(mail.outbox), 1)
+        self.assertEqual(mail.outbox[0].body, render_to_string('notifications/email_base.html', ctx))
diff --git a/zapisy/apps/notifications/tests/test_serialization.py b/zapisy/apps/notifications/tests/test_serialization.py
new file mode 100644
index 00000000..9ef43010
--- /dev/null
+++ b/zapisy/apps/notifications/tests/test_serialization.py
@@ -0,0 +1,16 @@
+from django.test import SimpleTestCase
+
+from apps.notifications.datatypes import Notification
+from apps.notifications.serialization import JsonNotificationSerializer
+
+
+class NotificationsSerializationTestCase(SimpleTestCase):
+
+    def test_json_serialization_is_reversible(self):
+        before = Notification('aaa{foo}bbb', {'foo': 'bar'})
+        serialized = JsonNotificationSerializer().serialize(before)
+        after = JsonNotificationSerializer().deserialize(serialized)
+
+        self.assertEqual(before.issued_on, after.issued_on)
+        self.assertEqual(before.description_id, after.description_id)
+        self.assertEqual(before.description_args, after.description_args)
diff --git a/zapisy/apps/notifications/tests/test_utils.py b/zapisy/apps/notifications/tests/test_utils.py
new file mode 100644
index 00000000..15b83ada
--- /dev/null
+++ b/zapisy/apps/notifications/tests/test_utils.py
@@ -0,0 +1,45 @@
+from django.test import TestCase
+
+from apps.notifications.templates import NotificationType
+from apps.notifications.exceptions import DescriptionArgumentMissingException
+from apps.notifications.utils import render_description
+
+
+class NotificationsUtilsTestCase(TestCase):
+
+    def test_pulled_from_queue_renders_properly(self):
+        descr_args = {'course_name': 'matematyka dyskretna', 'teacher': 'Jan Kowalski', 'type': 'ćwiczenia'}
+
+        rendered = render_description(
+            NotificationType.PULLED_FROM_QUEUE, descr_args)
+
+        self.assertEqual(
+            'Nastąpiło wciągnięcie Cię do grupy przedmiotu matematyka dyskretna, gdzie prowadzący to Jan Kowalski a typ grupy ćwiczenia.',
+            rendered)
+
+    def test_added_new_group_renders_properly(self):
+        descr_args = {'course_name': 'matematyka dyskretna', 'teacher': 'Jan Kowalski'}
+
+        rendered = render_description(
+            NotificationType.ADDED_NEW_GROUP, descr_args)
+
+        self.assertEqual(
+            'W przedmiocie matematyka dyskretna została dodana grupa prowadzona przez Jan Kowalski.',
+            rendered)
+
+    def test_assigned_to_new_group_as_teacher_renders_properly(self):
+        descr_args = {'course_name': 'matematyka dyskretna'}
+
+        rendered = render_description(
+            NotificationType.ASSIGNED_TO_NEW_GROUP_AS_A_TEACHER, descr_args)
+
+        self.assertEqual(
+            'Przydzielono Cię do grupy przedmiotu matematyka dyskretna jako prowadzącego.',
+            rendered)
+
+    def test_trying_to_render_with_insufficient_arguments_raises(self):
+        descr_args = {}
+
+        with self.assertRaises(DescriptionArgumentMissingException):
+            rendered = render_description(
+                NotificationType.PULLED_FROM_QUEUE, descr_args)
diff --git a/zapisy/apps/notifications/urls.py b/zapisy/apps/notifications/urls.py
index 7364a2bd..db35c880 100644
--- a/zapisy/apps/notifications/urls.py
+++ b/zapisy/apps/notifications/urls.py
@@ -1,13 +1,9 @@
 from django.conf.urls import url
 from . import views
 
+app_name = "notifications"
 urlpatterns = [
-    url(r'^notifications/save$', views.save, name='save'),
-    url(r'^notifications$', views.index, name='index'),
-    url(r'^notifications/vote_start$', views.vote_start,
-        name='vote_start'),
-    url(r'^notifications/grade_start$', views.grade_start,
-        name='grade_start'),
-    url(r'^notifications/enrollment_limit$', views.enrollment_limit,
-        name='enrollment_limit'),
+    url(r'^$', views.index, name='index'),
+    url(r'^preferences/$', views.preferences, name='preferences'),
+    url(r'^preferences/save$', views.preferences_save, name='preferences-save'),
 ]
diff --git a/zapisy/apps/notifications/utils.py b/zapisy/apps/notifications/utils.py
new file mode 100644
index 00000000..468cdb80
--- /dev/null
+++ b/zapisy/apps/notifications/utils.py
@@ -0,0 +1,11 @@
+from typing import Dict
+
+from apps.notifications.exceptions import DescriptionArgumentMissingException
+from apps.notifications.templates import mapping
+
+
+def render_description(description_id: str, description_args: Dict):
+    try:
+        return mapping[description_id].format(**description_args)
+    except KeyError:
+        raise DescriptionArgumentMissingException
diff --git a/zapisy/apps/notifications/views.py b/zapisy/apps/notifications/views.py
index 0b1d6666..8d525870 100644
--- a/zapisy/apps/notifications/views.py
+++ b/zapisy/apps/notifications/views.py
@@ -1,109 +1,63 @@
+from datetime import datetime
+
+from django.shortcuts import render
 from django.contrib import messages
-from django.contrib.auth.decorators import login_required
 from django.shortcuts import redirect
+from apps.users.models import BaseUser
+from django.http import HttpResponseRedirect
+from django.urls import reverse
+from django.contrib.auth.decorators import login_required
 from django.views.decorators.http import require_POST
-from django.shortcuts import render
-from django.contrib.admin.views.decorators import staff_member_required
-from django.views.decorators.csrf import csrf_exempt
-
-from apps.notifications.models import Notification
-from .forms import NotificationFormset
-
-GENERIC_ERROR = 'Wystąpił błąd podczas wysyłania powiadomień!'
-
-
-@require_POST
-@login_required
-def save(request):
-
-    formset = NotificationFormset(request.POST)
-
-    if formset.is_valid():
-        formset.save()
-        messages.success(request, 'Zmieniono ustawienia powiadomień')
-
-    else:
-        messages.error(request, 'Wystąpił błąd przy zapisie zmian ustawień')
+from apps.notifications.forms import PreferencesFormStudent, PreferencesFormTeacher
+from apps.notifications.models import NotificationPreferencesStudent, NotificationPreferencesTeacher
+from apps.notifications.repositories import get_notifications_repository
+from apps.notifications.utils import render_description
 
-    return redirect('my-profile')
+from libs.ajax_messages import AjaxFailureMessage
 
 
-@staff_member_required
 def index(request):
-    from datetime import date
+    if not request.user.is_authenticated:
+        return AjaxFailureMessage.auto_render(
+            'NotAuthenticated', 'Nie jesteś zalogowany.', request)
+    now = datetime.now()
+    repo = get_notifications_repository()
+    notifications = [
+        render_description(notification.description_id, notification.description_args)
+        for notification in repo.get_all_for_user(request.user)
+    ]
+    repo.remove_all_older_than(request.user, now)
 
-    year = date.today().year
-
-    return render(request, 'notifications/index.html', {'year': year})
+    return render(request, 'notifications/index.html', {'notifications': notifications})
 
 
 @require_POST
-@staff_member_required
-def vote_start(request):
-    from apps.offer.vote.models.system_state import SystemState
-    try:
-        try:
-            year = int(request.POST['year'])
-        except ValueError:
-            raise ValueError('Błędny rok akademicki')
-
-        which = request.POST['which']
-        if which not in ['main', 'winter', 'summer']:
-            raise ValueError('Błędny rodzaj głosowania')
-
-        state = SystemState.get_state(year)
-
-        if which == 'main':
-            end_of_vote_date = state.vote_end
-        elif which == 'winter':
-            end_of_vote_date = state.winter_correction_end
-        else:
-            end_of_vote_date = state.summer_correction_end
-
-        Notification.send_notifications('vote-start', {'end_of_vote_date': end_of_vote_date})
-
-        messages.success(request, 'Wysłano powiadomienia o rozpoczęciu głosowania!')
-    except ValueError as e:
-        messages.error(request, str(e))
-    except BaseException:
-        messages.error(request, GENERIC_ERROR)
-
-    return redirect('notifications:index')
-
-
-@staff_member_required
-def grade_start(request):
-    from apps.enrollment.courses.models.semester import Semester
-    try:
-        semester = Semester.get_current_semester()
-
-        if not semester:
-            raise ValueError('Nie można zidentyfikować bieżącego semestru!')
-
-        if not semester.is_grade_active:
-            raise ValueError('Ocena zajęć nie jest w tej chwili aktywna!')
-
-        Notification.send_notifications('grade-start')
-
-        messages.success(request, 'Wysłano powiadomienia o rozpoczęciu oceny zajęć')
-    except ValueError as e:
-        messages.error(request, str(e))
-    except BaseException:
-        messages.error(request, GENERIC_ERROR)
+@login_required
+def preferences_save(request):
+    form = create_form(request)
+    if form.is_valid():
+        post = form.save(commit=False)
+        post.user = request.user
+        post.save()
+        return HttpResponseRedirect(reverse('notifications:preferences'))
+    else:
+        messages.error(request, "Wystąpił błąd, zmiany nie zostały zapisane. Proszę wypełnić formularz ponownie")
 
-    return redirect('notifications:index')
 
+def preferences(request):
+    form = create_form(request)
+    return render(request, 'notifications/preferences.html', {'form': form})
 
-@staff_member_required
-def enrollment_limit(request):
-    from django.conf import settings
-    try:
-        Notification.send_notifications('enrollment-limit',
-                                        {'ECTS_LIMIT': settings.ECTS_LIMIT,
-                                         'ECTS_FINAL_LIMIT': settings.ECTS_FINAL_LIMIT})
 
-        messages.success(request, 'Wysłano powiadomienia o zwiększeniu limitu punktów ECTS')
-    except BaseException:
-        messages.error(request, GENERIC_ERROR)
+def create_form(request):
+    """It is not a view itself, just factory for preferences and preferences_save"""
+    if BaseUser.is_employee(request.user):
+        instance, created = NotificationPreferencesTeacher.objects.get_or_create(user=request.user)
+        if request.method == 'POST':
+            return PreferencesFormTeacher(request.POST, instance=instance)
+        return PreferencesFormTeacher(instance=instance)
 
-    return redirect('notifications:index')
+    instance, created = NotificationPreferencesStudent.objects.get_or_create(user=request.user)
+    if request.method == 'POST':
+        return PreferencesFormStudent(request.POST, instance=instance)
+    return PreferencesFormStudent(instance=instance)
diff --git a/zapisy/apps/offer/vote/migrations/0003_auto_20190108_1926.py b/zapisy/apps/offer/vote/migrations/0003_auto_20190108_1926.py
new file mode 100644
index 00000000..61c84904
--- /dev/null
+++ b/zapisy/apps/offer/vote/migrations/0003_auto_20190108_1926.py
@@ -0,0 +1,49 @@
+# Generated by Django 2.0.8 on 2019-01-08 19:26
+
+import datetime
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('vote', '0002_auto_20180525_0559'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='systemstate',
+            name='summer_correction_beg',
+            field=models.DateField(default=datetime.date(2017, 1, 1), verbose_name='Początek korekty letniej'),
+        ),
+        migrations.AlterField(
+            model_name='systemstate',
+            name='summer_correction_end',
+            field=models.DateField(default=datetime.date(2017, 7, 31), verbose_name='Koniec korekty letniej'),
+        ),
+        migrations.AlterField(
+            model_name='systemstate',
+            name='vote_beg',
+            field=models.DateField(default=datetime.date(2017, 6, 10), verbose_name='Początek głosowania'),
+        ),
+        migrations.AlterField(
+            model_name='systemstate',
+            name='vote_end',
+            field=models.DateField(default=datetime.date(2017, 7, 10), verbose_name='Koniec głosowania'),
+        ),
+        migrations.AlterField(
+            model_name='systemstate',
+            name='winter_correction_beg',
+            field=models.DateField(default=datetime.date(2017, 1, 1), verbose_name='Początek korekty zimowej'),
+        ),
+        migrations.AlterField(
+            model_name='systemstate',
+            name='winter_correction_end',
+            field=models.DateField(default=datetime.date(2017, 7, 31), verbose_name='Koniec korekty zimowej'),
+        ),
+        migrations.AlterField(
+            model_name='systemstate',
+            name='year',
+            field=models.IntegerField(default=2019, verbose_name='Rok akademicki'),
+        ),
+    ]
diff --git a/zapisy/apps/users/migrations/0010_auto_20180712_1227.py b/zapisy/apps/users/migrations/0010_auto_20180712_1227.py
index 0a468d13..c1cb1fd4 100644
--- a/zapisy/apps/users/migrations/0010_auto_20180712_1227.py
+++ b/zapisy/apps/users/migrations/0010_auto_20180712_1227.py
@@ -13,7 +13,6 @@ class Migration(migrations.Migration):
         ('schedule', '0006_auto_20180525_0559'),
         ('news', '0002_auto_20180525_0559'),
         ('poll', '0005_auto_20180525_0559'),
-        ('notifications', '0002_auto_20180525_0559'),
         ('email_change', '0001_initial'),
         ('users', '0009_auto_20180420_2334'),
     ]
diff --git a/zapisy/apps/users/templates/users/my_profile.html b/zapisy/apps/users/templates/users/my_profile.html
index fd713691..837a2ce0 100644
--- a/zapisy/apps/users/templates/users/my_profile.html
+++ b/zapisy/apps/users/templates/users/my_profile.html
@@ -5,15 +5,6 @@
 
 {% block styles %}
     {% compressed_css 'main' %}
-    <style>
-        .notifications ul {list-style-type: none;}
-        .notifications tr td:nth-child(2),
-        .notifications tr th:nth-child(2) { text-align: center; }
-
-        .notifications th { background-color: #F9F9F9;
-        border-top-width: 1px;
-        border-bottom-width: 1px;}
-    </style>
     <link rel="stylesheet" href="{% static "css/users/my_profile.css" %}" type="text/css">
 
 {% endblock %}
@@ -144,7 +135,7 @@ $('.checkall').live('click', function(){
             <th>Koniec zapisów</th>
             <td>{{ semester.records_closing|date:dateFormatStr }}</td>
         </tr>
-    
+
         {% if courses %}
             {% regroup courses by opening_time as times %}
             {% for time in times %}
@@ -163,7 +154,7 @@ $('.checkall').live('click', function(){
                         {% endfor %}
                         </ul>
                     {% endif %}
-                </td>                    
+                </td>
             </tr>
             {% endfor %}
         {% endif %}
@@ -206,42 +197,7 @@ $('.checkall').live('click', function(){
     </table>
 </form>
 {% endif %}
-<p class="info-table-header">Ustawienia powiadomień</p>
-
-<form method="POST" action="{% url 'notifications:save' %}">
-    {% csrf_token %}
-    {{ notifications.management_form }}
-
-    {% regroup notifications|dictsort:"category" by category as categories_list %}
-
-
-
-    <table class="notifications">
-    {% for group in categories_list %}
-        <tr class="catgroup{{ forloop.counter }}">
-            <th>
-                {{ group.grouper }}
-            </th>
-            <th><input type="checkbox" class="checkall"></th>
-        </tr>
-        {% for form in group.list %}
-        <tr class="catgroup{{ forloop.parentloop.counter }}">
-            <td>{{ form.instance.get_type_display }}</td>
-            <td>{{ form.value }}
-                {% for hidden in form.hidden_fields %}
-                {{ hidden }}
-                {% endfor %}</td>
-        </tr>
-        {% endfor %}
-    {% endfor %}
-    </table>
-    <p>
-        <strong>Uwaga</strong>: potwierdzenia oceny i głosowania zostaną podpisane i będą stanowić <strong>jedyną</strong> podstawę reklamacji.
-    </p>
-    <button type="submit" class="btn success right">
-        Zapisz
-    </button>
-</form>
+<br>
 {% if perms.users.mailto_all_students %}
     <a href="{% url 'email-students' %}">Wyślij wiadomość do studentów</a>
 {% endif %}
diff --git a/zapisy/apps/users/views.py b/zapisy/apps/users/views.py
index 8aaefa0c..c89e2d79 100644
--- a/zapisy/apps/users/views.py
+++ b/zapisy/apps/users/views.py
@@ -33,8 +33,6 @@ from apps.enrollment.records.models import Record
 from apps.enrollment.utils import mailto
 from apps.users.forms import EmailChangeForm, ConsultationsChangeForm, EmailToAllStudentsForm
 from apps.users.exceptions import InvalidUserException
-from apps.notifications.forms import NotificationFormset
-from apps.notifications.models import NotificationPreferences
 from libs.ajax_messages import AjaxSuccessMessage
 from mailer.models import Message
 
@@ -237,10 +235,6 @@ def my_profile(request: HttpRequest) -> HttpResponse:
     """profile site"""
     semester = Semester.objects.get_next()
 
-    notifications = NotificationFormset(
-        queryset=NotificationPreferences.objects.create_and_get(
-            request.user))
-
     if BaseUser.is_employee(request.user):
         consultations = request.user.employee.consultations
         room = request.user.employee.room
diff --git a/zapisy/assets/legacy/css/fereol.css b/zapisy/assets/legacy/css/fereol.css
index c5036319..b35ec1f8 100644
--- a/zapisy/assets/legacy/css/fereol.css
+++ b/zapisy/assets/legacy/css/fereol.css
@@ -400,13 +400,13 @@ table ul.voted-courses {
   margin: 0px !important;
 }
 
-.content-loading { 
+.content-loading {
   position: absolute;
   top: 0;
   left: 0;
   width: 100%;
   height: 100%;
-  min-height: 120px; 
+  min-height: 120px;
   background: white url(../images/launcher-loader.gif) no-repeat scroll center top 20px;
   background-size: 100px;
   opacity: 0.5; filter: alpha(opacity = 50); zoom: 1;
diff --git a/zapisy/requirements.common.txt b/zapisy/requirements.common.txt
index 87f98fba..ff8f7d15 100644
--- a/zapisy/requirements.common.txt
+++ b/zapisy/requirements.common.txt
@@ -29,4 +29,4 @@ xhtml2pdf==0.2.2
 postmarkup==1.2.2
 # Remove accents from strings (diacritics converted to Latin equivalents)
 unidecode==1.0.22
-
+redis==2.10.6
diff --git a/zapisy/run.py b/zapisy/run.py
index 93e6b9ba..a3c6fae4 100755
--- a/zapisy/run.py
+++ b/zapisy/run.py
@@ -56,10 +56,12 @@ def server(ip, port, no_package_install):
             ip=ip, port=port)])
     p2 = subprocess.Popen(["yarn", "devw"])
     p3 = subprocess.Popen(["python", "manage.py", "rqworker", "default"])
+    p4 = subprocess.Popen(["python", "manage.py", "rqworker", "dispatch-notifications"])
 
     p1.wait()
     p2.wait()
     p3.wait()
+    p4.wait()
     sys.exit(0)
 
 
diff --git a/zapisy/templates/base.html b/zapisy/templates/base.html
index faccd5c5..c5dca936 100644
--- a/zapisy/templates/base.html
+++ b/zapisy/templates/base.html
@@ -149,6 +149,7 @@
                         {% if user.is_staff %}
                             <a href="/fereol_admin/">Admin</a> |
                         {% endif %}
+                        <a href="/notifications"> Powiadomienia ({{ notification_counter }}) </a> |
                         {% if user.profile.is_student and user.student.get_number_of_news > 0 %}
                             <a href="{% url 'news-all' %}"
                                class="unread">Aktualności ({{ user.student.get_number_of_news }})</a> |
diff --git a/zapisy/test_app/tests.py b/zapisy/test_app/tests.py
index 34dc2a1f..745bf6d6 100644
--- a/zapisy/test_app/tests.py
+++ b/zapisy/test_app/tests.py
@@ -703,7 +703,6 @@ class AdminTests(SeleniumTestCase):
         "/fereol_admin/mailer/messagelog/",
         "/fereol_admin/mailer/message/",
         "/fereol_admin/news/news/",
-        "/fereol_admin/notifications/notificationpreferences/",
         "/fereol_admin/poll/template/",
         "/fereol_admin/poll/savedticket/",
         "/fereol_admin/preferences/preference/",
diff --git a/zapisy/zapisy/settings.py b/zapisy/zapisy/settings.py
index 15c2eb55..c7f0d8bb 100644
--- a/zapisy/zapisy/settings.py
+++ b/zapisy/zapisy/settings.py
@@ -1,6 +1,9 @@
 import os
 import logging
 import environ
+import sys
+
+TESTING = 'test' in sys.argv
 
 BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
 
@@ -54,9 +57,18 @@ RQ_QUEUES = {
         'DB': 0,
         'PASSWORD': '',
         'DEFAULT_TIMEOUT': 360,
+        'ASYNC': RUN_ASYNC,
+    },
+    'dispatch-notifications': {
+        'HOST': 'localhost',
+        'PORT': 6379,
+        'DB': 0,
     },
 }
 
+if TESTING:
+    RQ_QUEUES['dispatch-notifications']['ASYNC'] = False
+
 # mass-mail account
 # You can test sending with:
 # $ python -m smtpd -n -c DebuggingServer localhost:1025
@@ -148,6 +160,7 @@ TEMPLATES = [
                 'django.contrib.messages.context_processors.messages',
                 'django.contrib.auth.context_processors.auth',
                 'django.template.context_processors.request',
+                'apps.notifications.context_processors.notification_ico',
                 'apps.users.context_processors.roles',
             ],
             'loaders': TEMPLATE_LOADERS_TO_USE
diff --git a/zapisy/zapisy/urls.py b/zapisy/zapisy/urls.py
index ea633b83..f050e66d 100644
--- a/zapisy/zapisy/urls.py
+++ b/zapisy/zapisy/urls.py
@@ -1,5 +1,6 @@
 from django.conf.urls import include, url
 from django.contrib import admin
+from django.urls import path
 from django.views.generic import TemplateView
 from django_cas_ng import views
 
@@ -20,6 +21,8 @@ urlpatterns = [
     url(r'^statistics/', include(('apps.statistics.urls', 'statistics'), namespace='statistics')),
     url(r'^consultations/$', users_views.consultations_list, name="consultations-list"),
 
+    path('django-rq/', include('django_rq.urls')),
+
     url(r'^news/', include('apps.news.urls')),
     url(r'^jstests/', TemplateView.as_view(template_name="jstests/tests.html")),
     url(r'^users/', include('apps.users.urls')),
@@ -40,7 +43,7 @@ urlpatterns = [
     url(r'^prefs/', include('apps.offer.preferences.urls')),
     url(r'^desiderata/', include('apps.offer.desiderata.urls')),
     url(r'^', include(('apps.schedule.urls', 'events'), namespace='events')),
-    url(r'^', include(('apps.notifications.urls', 'notifications'), namespace='notifications')),
+    url(r'^notifications/', include('apps.notifications.urls')),
     url(r'^vote/', include('apps.offer.vote.urls')),
     url(r'^admin/doc/', include('django.contrib.admindocs.urls')),
     url(r'^fereol_admin/', admin.site.urls),
