from django.db import models, migrations
from django_extensions.db.fields import AutoSlugField


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='StudentPointsView',
            fields=[
                ('value', models.SmallIntegerField()),
                ('student', models.ForeignKey(primary_key=True, serialize=False, to='users.Student', on_delete=models.CASCADE)),
            ],
            options={
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ChangedDay',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('day', models.DateField(unique=True, verbose_name=b'dzie\xc5\x84 wolny')),
                ('weekday', models.CharField(max_length=1, verbose_name=b'zmieniony na', choices=[(b'1', 'poniedzialek'), (b'2', 'wtorek'), (b'3', 'sroda'), (b'4', 'czwartek'), (b'5', 'piatek'), (b'6', 'sobota'), (b'7', 'niedziela')])),
            ],
            options={
                'verbose_name': 'dzie\u0144 zmienony na inny',
                'verbose_name_plural': 'dni zmienione na inne',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Classroom',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('type', models.IntegerField(default=1, verbose_name=b'typ', choices=[(0, 'Sala wyk\u0142adowa'), (1, 'Sala \u0107wiczeniowa'), (2, 'Pracownia komputerowa - Windows'), (3, 'Pracownia komputerowa - Linux')])),
                ('description', models.TextField(null=True, verbose_name=b'opis', blank=True)),
                ('number', models.CharField(max_length=20, verbose_name=b'numer sali')),
                ('order', models.IntegerField(null=True, blank=True)),
                ('building', models.CharField(default=b'', max_length=75, verbose_name=b'budynek', blank=True)),
                ('capacity', models.PositiveSmallIntegerField(default=0, verbose_name=b'liczba miejsc')),
                ('floor', models.IntegerField(blank=True, null=True, choices=[(0, b'Parter'), (1, b'I pi\xc4\x99tro'), (2, b'II Pi\xc4\x99tro'), (3, b'III pi\xc4\x99tro')])),
                ('can_reserve', models.BooleanField(default=False)),
                ('slug', AutoSlugField(populate_from='number', editable=False)),
            ],
            options={
                'ordering': ['floor', 'number'],
                'verbose_name': 'sala',
                'verbose_name_plural': 'sale',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('slug', models.SlugField(max_length=255, unique=True, null=True, verbose_name=b'odno\xc5\x9bnik')),
                ('notes', models.TextField(null=True, verbose_name=b'uwagi do tej edyci przedmiotu', blank=True)),
                ('web_page', models.URLField(null=True, verbose_name=b'Strona WWW przedmiotu', blank=True)),
                ('english', models.BooleanField(default=False, verbose_name=b'przedmiot prowadzony w j.angielskim')),
                ('records_start', models.DateTimeField(null=True, verbose_name='Pocz\u0105tek zapis\xf3w', blank=True)),
                ('records_end', models.DateTimeField(null=True, verbose_name='Koniec zapis\xf3w', blank=True)),
            ],
            options={
                'ordering': ['entity__name'],
                'verbose_name': 'przedmiot',
                'verbose_name_plural': 'przedmioty',
                'permissions': (('view_stats', 'Mo\u017ce widzie\u0107 statystyki'),),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='CourseDescription',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('is_ready', models.BooleanField()),
                ('description', models.TextField(default=b'', verbose_name=b'opis', blank=True)),
                ('description_pl', models.TextField(default=b'', null=True, verbose_name=b'opis', blank=True)),
                ('description_en', models.TextField(default=b'', null=True, verbose_name=b'opis', blank=True)),
                ('lectures', models.IntegerField(default=0, null=True, verbose_name='r\xf3\u017cnica w godzinach wyk\u0142adu', blank=True)),
                ('repetitions', models.IntegerField(default=0, null=True, verbose_name='r\xf3\u017cnica w godzinach repetytori\xf3w', blank=True)),
                ('exercises', models.IntegerField(default=0, null=True, verbose_name='r\xf3\u017cnica w godzinach \u0107wicze\u0144', blank=True)),
                ('laboratories', models.IntegerField(default=0, null=True, verbose_name='r\xf3\u017cnica w godzinach pracowni', blank=True)),
                ('seminars', models.IntegerField(default=0, null=True, verbose_name='r\xf3\u017cnica w godzinach seminari\xf3w', blank=True)),
                ('exercises_laboratories', models.IntegerField(default=0, null=True, verbose_name='r\xf3\u017cnica w godzinach \u0107w+prac', blank=True)),
                ('exam', models.BooleanField(verbose_name=b'egzamin')),
                ('created', models.DateTimeField(auto_now=True, auto_now_add=True)),
                ('author', models.ForeignKey(to='users.Employee', on_delete=models.CASCADE)),
            ],
            options={
                'verbose_name': 'opis przedmiotu',
                'verbose_name_plural': 'opisy przedmiotu',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='CourseEntity',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=100, verbose_name=b'nazwa')),
                ('name_pl', models.CharField(max_length=100, null=True, verbose_name=b'nazwa')),
                ('name_en', models.CharField(max_length=100, null=True, verbose_name=b'nazwa')),
                ('shortName', models.CharField(help_text='Opcjonalna skr\xf3cona nazwa, u\u017cywana na np. planie. Przyk\u0142ady: JFiZO, AiSD', max_length=30, null=True, verbose_name=b'skr\xc3\xb3cona nazwa', blank=True)),
                ('status', models.IntegerField(default=0, choices=[(0, 'Propozycja'), (1, 'W ofercie'), (2, 'Poddana pod g\u0142osowanie'), (4, 'Wycofany z oferty'), (5, 'Do poprawienia')])),
                ('semester', models.CharField(default=b'u', max_length=1, verbose_name=b'semestr', choices=[(b'u', b'nieoznaczony'), (b'z', b'zimowy'), (b'l', b'letni')])),
                ('english', models.BooleanField(default=False, verbose_name=b'przedmiot prowadzony w j.angielskim')),
                ('exam', models.BooleanField(default=True, verbose_name=b'egzamin')),
                ('suggested_for_first_year', models.BooleanField(verbose_name=b'polecany dla pierwszego roku')),
                ('web_page', models.URLField(null=True, verbose_name=b'strona www', blank=True)),
                ('ects', models.IntegerField(null=True, blank=True)),
                ('lectures', models.IntegerField(null=True, verbose_name='godzin wyk\u0142adu', blank=True)),
                ('exercises', models.IntegerField(null=True, verbose_name='godzin \u0107wicze\u0144', blank=True)),
                ('laboratories', models.IntegerField(null=True, verbose_name='godzin pracowni', blank=True)),
                ('repetitions', models.IntegerField(null=True, verbose_name='godzin repetytorium', blank=True)),
                ('seminars', models.IntegerField(null=True, verbose_name='godzin seminari\xf3w', blank=True)),
                ('exercises_laboratiories', models.IntegerField(null=True, verbose_name='godzin \u0107wiczenio-pracowni', blank=True)),
                ('deleted', models.BooleanField(default=False, verbose_name=b'ukryty')),
                ('slug', models.SlugField(max_length=255, unique=True, null=True, verbose_name=b'odno\xc5\x9bnik (nazwa pojawiaj\xc4\x85ca si\xc4\x99 w urlach)')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name=b'Utworzono')),
                ('edited', models.DateTimeField(auto_now=True, verbose_name=b'Ostatnia zmiana')),
                ('in_prefs', models.BooleanField(default=True, verbose_name=b'w preferencjach')),
                ('dyskretna_l', models.BooleanField(default=False, verbose_name='Przedmiot posiada r\xf3wnie\u017c wersje: Dyskretna (L)')),
                ('numeryczna_l', models.BooleanField(default=False, verbose_name='Przedmiot posiada r\xf3wnie\u017c wersje: Numeryczna (L)')),
                ('algorytmy_l', models.BooleanField(default=False, verbose_name='Przedmiot posiada r\xf3wnie\u017c wersje: Algorytmy (L)')),
                ('programowanie_l', models.BooleanField(default=False, verbose_name='Przedmiot posiada r\xf3wnie\u017c wersje: Programowanie (L)')),
                ('usos_kod', models.CharField(default=b'', max_length=20, blank=True, help_text=b'UWAGA! Nie edytuj tego pola sam!', null=True, verbose_name='Kod przedmiotu w usos')),
                ('ue', models.BooleanField(default=False, verbose_name='Przedmiot prowadzony przy pomocy \u015brodk\xf3w pochodz\u0105cych z Unii Europejskiej')),
            ],
            options={
                'ordering': ['name'],
                'verbose_name': 'Podstawa przedmiotu',
                'verbose_name_plural': 'Podstawy przedmiot\xf3w',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Effects',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('group_name', models.CharField(max_length=250, verbose_name='grupa efekt\xf3w')),
                ('description', models.TextField(null=True, verbose_name='opis', blank=True)),
            ],
            options={
                'verbose_name': 'Grupa Efekt\xf3w',
                'verbose_name_plural': 'Grupy Efekt\xf3w',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Freeday',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('day', models.DateField(unique=True, verbose_name=b'dzie\xc5\x84 wolny')),
            ],
            options={
                'verbose_name': 'dzie\u0144 wolny od zaj\u0119\u0107',
                'verbose_name_plural': 'dni wolne od zaj\u0119\u0107',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('type', models.CharField(max_length=2, verbose_name=b'typ zaj\xc4\x99\xc4\x87', choices=[(b'1', b'wyk\xc5\x82ad'), (b'2', b'\xc4\x87wiczenia'), (b'3', b'pracownia'), (b'5', b'\xc4\x87wiczenio-pracownia'), (b'6', b'seminarium'), (b'7', b'lektorat'), (b'8', b'WF'), (b'9', b'repetytorium'), (b'10', b'projekt')])),
                ('limit', models.PositiveSmallIntegerField(default=0, verbose_name=b'limit miejsc')),
                ('limit_zamawiane', models.PositiveSmallIntegerField(default=0, help_text=b'miejsca gwarantowane dla student\xc3\xb3w zamawianych 2009', verbose_name=b'miejsca dla zamawianych 2009')),
                ('limit_zamawiane2012', models.PositiveSmallIntegerField(default=0, help_text=b'miejsca gwarantowane dla student\xc3\xb3w zamawianych 2012', verbose_name=b'miejsca dla zamawianych 2012')),
                ('limit_isim', models.PositiveSmallIntegerField(default=0, help_text=b'miejsca gwarantowane dla student\xc3\xb3w isim', verbose_name=b'miejsca dla ISIM')),
                ('extra', models.CharField(default=b'', max_length=20, verbose_name=b'dodatkowe informacje', blank=True, choices=[(b'', b''), (b'pierwsze 7 tygodni', b'pierwsze 7 tygodni'), (b'drugie 7 tygodni', b'drugie 7 tygodni'), (b'grupa rezerwowa', b'grupa rezerwowa'), (b'grupa licencjacka', b'grupa licencjacka'), (b'grupa magisterska', b'grupa magisterska'), (b'grupa zaawansowana', b'grupa zaawansowana'), (b'zajecia na mat.', 'zaj\u0119cia na matematyce'), ('wyk\u0142ad okrojony', b'wyk\xc5\x82ad okrojony'), ('grupa 1', b'grupa 1'), ('grupa 2', b'grupa 2'), ('grupa 3', b'grupa 3'), ('grupa 4', b'grupa 4'), ('grupa 5', b'grupa 5'), ('pracownia linuksowa', b'pracownia linuksowa'), ('grupa angloj\u0119zyczna', b'grupa angloj\xc4\x99zyczna'), ('I rok', b'I rok'), ('II rok', b'II rok'), ('ISIM', b'ISIM')])),
                ('export_usos', models.BooleanField(default=True, verbose_name=b'czy eksportowa\xc4\x87 do usos?')),
                ('enrolled', models.PositiveIntegerField(default=0, verbose_name=b'liczba zapisanych student\xc3\xb3w', editable=False)),
                ('enrolled_zam', models.PositiveIntegerField(default=0, verbose_name=b'liczba zapisanych student\xc3\xb3w zamawianych', editable=False)),
                ('enrolled_zam2012', models.PositiveIntegerField(default=0, verbose_name=b'liczba zapisanych student\xc3\xb3w zamawianych', editable=False)),
                ('enrolled_isim', models.PositiveIntegerField(default=0, verbose_name=b'liczba zapisanych student\xc3\xb3w ISIM', editable=False)),
                ('queued', models.PositiveIntegerField(default=0, verbose_name=b'liczba student\xc3\xb3w w kolejce', editable=False)),
                ('usos_nr', models.IntegerField(help_text=b'UWAGA! Nie edytuj tego pola sam!', null=True, verbose_name='Nr grupy w usos', blank=True)),
                ('course', models.ForeignKey(related_name='groups', verbose_name=b'przedmiot', to='courses.Course', on_delete=models.CASCADE)),
                ('teacher', models.ForeignKey(verbose_name=b'prowadz\xc4\x85cy', blank=True, to='users.Employee', null=True, on_delete=models.CASCADE)),
            ],
            options={
                'verbose_name': 'grupa',
                'verbose_name_plural': 'grupy',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='PointsOfCourseEntities',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('value', models.PositiveSmallIntegerField(default=6, verbose_name=b'liczba punkt\xc3\xb3w')),
                ('entity', models.ForeignKey(verbose_name=b'podstawa przedmiotu', to='courses.CourseEntity', on_delete=models.CASCADE)),
                ('program', models.ForeignKey(default=None, blank=True, to='users.Program', null=True, verbose_name=b'Program Studi\xc3\xb3w', on_delete=models.CASCADE)),
            ],
            options={
                'verbose_name': 'zale\u017cno\u015b\u0107 podstawa przedmiotu-punkty',
                'verbose_name_plural': 'zale\u017cno\u015bci podstawy przedmiotu-punkty',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='PointTypes',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(default=b'', max_length=30, verbose_name=b'rodzaj punkt\xc3\xb3w')),
            ],
            options={
                'verbose_name': 'rodzaj punktu',
                'verbose_name_plural': 'rodzaje punkt\xf3w',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Semester',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('visible', models.BooleanField(verbose_name=b'widoczny')),
                ('type', models.CharField(max_length=1, verbose_name=b'rodzaj semestru', choices=[(b'z', 'zimowy'), (b'l', 'letni')])),
                ('year', models.CharField(default=b'0', max_length=7, verbose_name=b'rok akademicki')),
                ('records_opening', models.DateTimeField(help_text=b'Godzina powinna by\xc4\x87 ustawiona na 00:00:00, by studenci mieli otwarcie mi\xc4\x99dzy 10:00 a 22:00.', null=True, verbose_name=b'Czas otwarcia zapis\xc3\xb3w', blank=True)),
                ('records_closing', models.DateTimeField(null=True, verbose_name=b'Czas zamkniecia zapis\xc3\xb3w', blank=True)),
                ('records_ending', models.DateTimeField(null=True, verbose_name=b'Czas zamkni\xc4\x99cia wypis\xc3\xb3w', blank=True)),
                ('lectures_beginning', models.DateField(null=True, verbose_name=b'Dzie\xc5\x84 rozpocz\xc4\x99cia zaj\xc4\x99\xc4\x87', blank=True)),
                ('lectures_ending', models.DateField(null=True, verbose_name=b'Dzie\xc5\x84 zako\xc5\x84czenia zaj\xc4\x99\xc4\x87', blank=True)),
                ('semester_beginning', models.DateField(verbose_name=b'Data rozpocz\xc4\x99cia semestru')),
                ('semester_ending', models.DateField(verbose_name=b'Data zako\xc5\x84czenia semestru')),
                ('desiderata_opening', models.DateTimeField(null=True, verbose_name=b'Czas otwarcia dezyderat', blank=True)),
                ('desiderata_closing', models.DateTimeField(null=True, verbose_name=b'Czas zamkni\xc4\x99cia dezyderat', blank=True)),
                ('is_grade_active', models.BooleanField(verbose_name=b'Ocena aktywna')),
                ('records_ects_limit_abolition', models.DateTimeField(null=True, verbose_name=b'Czas zniesienia limitu 35 ECTS')),
                ('t0_are_ready', models.BooleanField(default=False, verbose_name='T0 zosta\u0142y ustalone')),
                ('first_grade_semester', models.ForeignKey(related_name='fgrade', verbose_name=b'Pierwszy semestr oceny', blank=True, to='courses.Semester', null=True, on_delete=models.CASCADE)),
                ('second_grade_semester', models.ForeignKey(related_name='sgrade', verbose_name=b'Drugi semester oceny', blank=True, to='courses.Semester', null=True, on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ['-year', 'type'],
                'verbose_name': 'semestr',
                'verbose_name_plural': 'semestry',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='StudentOptions',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('records_opening_bonus_minutes', models.IntegerField(default=0, verbose_name=b'Przyspieszenie otwarcia zapis\xc3\xb3w na ten przedmiot (minuty)')),
                ('course', models.ForeignKey(verbose_name=b'przedmiot', to='courses.Course', on_delete=models.CASCADE)),
                ('student', models.ForeignKey(verbose_name=b'student', to='users.Student', on_delete=models.CASCADE)),
            ],
            options={
                'verbose_name': 'zale\u017cno\u015b\u0107 przedmiot-student',
                'verbose_name_plural': 'zale\u017cno\u015bci przedmiot-student',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('short_name', models.CharField(max_length=50, verbose_name='nazwa skr\xf3cona')),
                ('full_name', models.CharField(max_length=250, verbose_name='nazwa pe\u0142na')),
                ('description', models.TextField(verbose_name='opis')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tagi',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TagCourseEntity',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('weight', models.IntegerField(verbose_name='Waga')),
                ('courseentity', models.ForeignKey(to='courses.CourseEntity', on_delete=models.CASCADE)),
                ('tag', models.ForeignKey(to='courses.Tag', on_delete=models.CASCADE)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Term',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('dayOfWeek', models.CharField(max_length=1, verbose_name=b'dzie\xc5\x84 tygodnia', choices=[(b'1', 'poniedzialek'), (b'2', 'wtorek'), (b'3', 'sroda'), (b'4', 'czwartek'), (b'5', 'piatek'), (b'6', 'sobota'), (b'7', 'niedziela')])),
                ('start_time', models.TimeField(verbose_name=b'rozpocz\xc4\x99cie')),
                ('end_time', models.TimeField(verbose_name=b'zako\xc5\x84czenie')),
                ('classroom', models.ForeignKey(verbose_name=b'sala', blank=True, to='courses.Classroom', null=True, on_delete=models.CASCADE)),
                ('classrooms', models.ManyToManyField(related_name='new_classrooms', null=True, verbose_name=b'sale', to='courses.Classroom', blank=True)),
                ('group', models.ForeignKey(related_name='term', verbose_name=b'grupa', to='courses.Group', on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ['dayOfWeek'],
                'verbose_name': 'termin',
                'verbose_name_plural': 'terminy',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(default=b'', max_length=30, verbose_name=b'rodzaj zajec')),
                ('short_name', models.CharField(default=b'', max_length=5, verbose_name=b'rodzaj zajec (kr\xc3\xb3\xc5\xa7ka forma)')),
                ('meta_type', models.BooleanField(default=False, verbose_name=b'Grupa typow')),
                ('free_in_vote', models.BooleanField(default=False)),
                ('have_review_lecture', models.BooleanField(default=False, verbose_name='Posiada repetytorium')),
                ('have_lecture', models.BooleanField(default=False, verbose_name='Posiada wyk\u0142ad')),
                ('have_tutorial', models.BooleanField(default=False, verbose_name='Posiada \u0107wiczenia')),
                ('have_lab', models.BooleanField(default=False, verbose_name='Posiada pracowni\u0119')),
                ('have_tutorial_lab', models.BooleanField(default=False, verbose_name='Posiada \u0107wiczenio-pracowni\u0119')),
                ('have_seminar', models.BooleanField(default=False, verbose_name='Posiada seminarium')),
                ('have_project', models.BooleanField(default=False, verbose_name='Posiada projekt')),
                ('default_ects', models.IntegerField(default=6, verbose_name='Punkty ECTS')),
                ('group', models.ForeignKey(verbose_name=b'grupa', blank=True, to='courses.Type', null=True, on_delete=models.CASCADE)),
            ],
            options={
                'verbose_name': 'rodzaj przedmiotu',
                'verbose_name_plural': 'rodzaje przedmiot\xf3w',
            },
            bases=(models.Model,),
        ),
        migrations.AlterUniqueTogether(
            name='studentoptions',
            unique_together=set([('course', 'student')]),
        ),
        migrations.AlterUniqueTogether(
            name='semester',
            unique_together=set([('type', 'year')]),
        ),
        migrations.AddField(
            model_name='pointsofcourseentities',
            name='type_of_point',
            field=models.ForeignKey(verbose_name=b'rodzaj punkt\xc3\xb3w', to='courses.PointTypes', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='pointsofcourseentities',
            unique_together=set([('entity', 'type_of_point', 'program')]),
        ),
        migrations.AddField(
            model_name='courseentity',
            name='effects',
            field=models.ManyToManyField(to='courses.Effects', null=True, verbose_name='Grupa efekt\xf3w kszta\u0142cenia', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='courseentity',
            name='information',
            field=models.ForeignKey(blank=True, to='courses.CourseDescription', null=True, on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='courseentity',
            name='owner',
            field=models.ForeignKey(verbose_name=b'opiekun', blank=True, to='users.Employee', null=True, on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='courseentity',
            name='tags',
            field=models.ManyToManyField(to='courses.Tag', through='courses.TagCourseEntity'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='courseentity',
            name='type',
            field=models.ForeignKey(verbose_name=b'rodzaj', to='courses.Type', null=True, on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='coursedescription',
            name='entity',
            field=models.ForeignKey(to='courses.CourseEntity', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='coursedescription',
            name='requirements',
            field=models.ManyToManyField(related_name='+', verbose_name=b'wymagania', to='courses.CourseEntity', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='course',
            name='entity',
            field=models.ForeignKey(verbose_name=b'podstawa przedmiotu', to='courses.CourseEntity', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='course',
            name='information',
            field=models.ForeignKey(verbose_name=b'opis', blank=True, to='courses.CourseDescription', null=True, on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='course',
            name='semester',
            field=models.ForeignKey(verbose_name=b'semestr', to='courses.Semester', null=True, on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='course',
            name='students_options',
            field=models.ManyToManyField(to='users.Student', verbose_name=b'opcje student\xc3\xb3w', through='courses.StudentOptions'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='course',
            name='teachers',
            field=models.ManyToManyField(to='users.Employee', verbose_name=b'prowadz\xc4\x85cy', blank=True),
            preserve_default=True,
        ),
    ]
